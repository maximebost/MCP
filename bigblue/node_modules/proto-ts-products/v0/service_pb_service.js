// package: bigblue.products.v0
// file: bigblue/products/v0/service.proto

var bigblue_products_v0_service_pb = require("./service_pb");
var bigblue_products_v0_packunit_pb = require("./packunit_pb");
var bigblue_products_v0_product_pb = require("./product_pb");
var google_protobuf_empty_pb = require("google-protobuf/google/protobuf/empty_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var Service = (function () {
  function Service() {}
  Service.serviceName = "bigblue.products.v0.Service";
  return Service;
}());

Service.CreateProduct = {
  methodName: "CreateProduct",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.CreateProductRequest,
  responseType: bigblue_products_v0_product_pb.Product
};

Service.GetProduct = {
  methodName: "GetProduct",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.GetProductRequest,
  responseType: bigblue_products_v0_product_pb.Product
};

Service.BatchGetProducts = {
  methodName: "BatchGetProducts",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.BatchGetProductsRequest,
  responseType: bigblue_products_v0_service_pb.BatchGetProductsResponse
};

Service.ListProducts = {
  methodName: "ListProducts",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.ListProductsRequest,
  responseType: bigblue_products_v0_service_pb.ListProductsResponse
};

Service.UpdateProduct = {
  methodName: "UpdateProduct",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.UpdateProductRequest,
  responseType: bigblue_products_v0_product_pb.Product
};

Service.CreateProductPackUnit = {
  methodName: "CreateProductPackUnit",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.CreateProductPackUnitRequest,
  responseType: bigblue_products_v0_packunit_pb.ProductPackUnit
};

Service.UpdateProductPackUnit = {
  methodName: "UpdateProductPackUnit",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.UpdateProductPackUnitRequest,
  responseType: bigblue_products_v0_packunit_pb.ProductPackUnit
};

Service.ListProductPackUnits = {
  methodName: "ListProductPackUnits",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.ListProductPackUnitsRequest,
  responseType: bigblue_products_v0_service_pb.ListProductPackUnitsResponse
};

Service.BatchUpdateProducts = {
  methodName: "BatchUpdateProducts",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.BatchUpdateProductsRequest,
  responseType: bigblue_products_v0_service_pb.BatchUpdateProductsResponse
};

Service.DeleteProduct = {
  methodName: "DeleteProduct",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.DeleteProductRequest,
  responseType: google_protobuf_empty_pb.Empty
};

Service.GetBarcodeAvailability = {
  methodName: "GetBarcodeAvailability",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.GetBarcodeAvailabilityRequest,
  responseType: bigblue_products_v0_service_pb.GetBarcodeAvailabilityResponse
};

Service.BatchGetBarcodeAvailabilities = {
  methodName: "BatchGetBarcodeAvailabilities",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.BatchGetBarcodeAvailabilitiesRequest,
  responseType: bigblue_products_v0_service_pb.BatchGetBarcodeAvailabilitiesResponse
};

Service.ValidateTariffNumber = {
  methodName: "ValidateTariffNumber",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.ValidateTariffNumberRequest,
  responseType: bigblue_products_v0_service_pb.ValidateTariffNumberResponse
};

Service.CreateBundle = {
  methodName: "CreateBundle",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.CreateBundleRequest,
  responseType: bigblue_products_v0_product_pb.Bundle
};

Service.BatchCreateBundles = {
  methodName: "BatchCreateBundles",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.BatchCreateBundlesRequest,
  responseType: bigblue_products_v0_service_pb.BatchCreateBundlesResponse
};

Service.UpdateBundle = {
  methodName: "UpdateBundle",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.UpdateBundleRequest,
  responseType: bigblue_products_v0_product_pb.Bundle
};

Service.GetBundle = {
  methodName: "GetBundle",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.GetBundleRequest,
  responseType: bigblue_products_v0_product_pb.Bundle
};

Service.ListBundles = {
  methodName: "ListBundles",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.ListBundlesRequest,
  responseType: bigblue_products_v0_service_pb.ListBundlesResponse
};

Service.DeleteBundle = {
  methodName: "DeleteBundle",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.DeleteBundleRequest,
  responseType: google_protobuf_empty_pb.Empty
};

Service.BatchListContainers = {
  methodName: "BatchListContainers",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.BatchListContainersRequest,
  responseType: bigblue_products_v0_service_pb.BatchListContainersResponse
};

Service.ListContainers = {
  methodName: "ListContainers",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.ListContainersRequest,
  responseType: bigblue_products_v0_service_pb.ListContainersResponse
};

Service.GetSettings = {
  methodName: "GetSettings",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: google_protobuf_empty_pb.Empty,
  responseType: bigblue_products_v0_product_pb.Settings
};

Service.BatchGetProductBuyerLocalizations = {
  methodName: "BatchGetProductBuyerLocalizations",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.BatchGetProductBuyerLocalizationsRequest,
  responseType: bigblue_products_v0_service_pb.BatchGetProductBuyerLocalizationsResponse
};

Service.BatchUpsertProductBuyerLocalizations = {
  methodName: "BatchUpsertProductBuyerLocalizations",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.BatchUpsertProductBuyerLocalizationsRequest,
  responseType: bigblue_products_v0_service_pb.BatchUpsertProductBuyerLocalizationsResponse
};

Service.ListProductBuyerLocalizations = {
  methodName: "ListProductBuyerLocalizations",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.ListProductBuyerLocalizationsRequest,
  responseType: bigblue_products_v0_service_pb.ListProductBuyerLocalizationsResponse
};

Service.DeleteProductBuyerLocalization = {
  methodName: "DeleteProductBuyerLocalization",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.DeleteProductBuyerLocalizationRequest,
  responseType: google_protobuf_empty_pb.Empty
};

Service.ExportProducts = {
  methodName: "ExportProducts",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.ExportProductsRequest,
  responseType: google_protobuf_empty_pb.Empty
};

Service.DebundleLineItems = {
  methodName: "DebundleLineItems",
  service: Service,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_service_pb.DebundleLineItemsRequest,
  responseType: bigblue_products_v0_service_pb.DebundleLineItemsResponse
};

exports.Service = Service;

function ServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

ServiceClient.prototype.createProduct = function createProduct(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.CreateProduct, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.getProduct = function getProduct(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.GetProduct, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.batchGetProducts = function batchGetProducts(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.BatchGetProducts, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.listProducts = function listProducts(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.ListProducts, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.updateProduct = function updateProduct(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.UpdateProduct, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.createProductPackUnit = function createProductPackUnit(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.CreateProductPackUnit, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.updateProductPackUnit = function updateProductPackUnit(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.UpdateProductPackUnit, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.listProductPackUnits = function listProductPackUnits(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.ListProductPackUnits, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.batchUpdateProducts = function batchUpdateProducts(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.BatchUpdateProducts, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.deleteProduct = function deleteProduct(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.DeleteProduct, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.getBarcodeAvailability = function getBarcodeAvailability(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.GetBarcodeAvailability, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.batchGetBarcodeAvailabilities = function batchGetBarcodeAvailabilities(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.BatchGetBarcodeAvailabilities, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.validateTariffNumber = function validateTariffNumber(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.ValidateTariffNumber, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.createBundle = function createBundle(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.CreateBundle, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.batchCreateBundles = function batchCreateBundles(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.BatchCreateBundles, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.updateBundle = function updateBundle(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.UpdateBundle, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.getBundle = function getBundle(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.GetBundle, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.listBundles = function listBundles(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.ListBundles, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.deleteBundle = function deleteBundle(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.DeleteBundle, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.batchListContainers = function batchListContainers(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.BatchListContainers, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.listContainers = function listContainers(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.ListContainers, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.getSettings = function getSettings(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.GetSettings, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.batchGetProductBuyerLocalizations = function batchGetProductBuyerLocalizations(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.BatchGetProductBuyerLocalizations, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.batchUpsertProductBuyerLocalizations = function batchUpsertProductBuyerLocalizations(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.BatchUpsertProductBuyerLocalizations, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.listProductBuyerLocalizations = function listProductBuyerLocalizations(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.ListProductBuyerLocalizations, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.deleteProductBuyerLocalization = function deleteProductBuyerLocalization(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.DeleteProductBuyerLocalization, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.exportProducts = function exportProducts(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.ExportProducts, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

ServiceClient.prototype.debundleLineItems = function debundleLineItems(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Service.DebundleLineItems, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.ServiceClient = ServiceClient;


