// package: bigblue.products.v0
// file: bigblue/products/v0/warehouseservice.proto

var bigblue_products_v0_warehouseservice_pb = require("./warehouseservice_pb");
var bigblue_products_v0_product_pb = require("./product_pb");
var google_protobuf_empty_pb = require("google-protobuf/google/protobuf/empty_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var WarehouseService = (function () {
  function WarehouseService() {}
  WarehouseService.serviceName = "bigblue.products.v0.WarehouseService";
  return WarehouseService;
}());

WarehouseService.GetProduct = {
  methodName: "GetProduct",
  service: WarehouseService,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_warehouseservice_pb.WarehouseGetProductRequest,
  responseType: bigblue_products_v0_product_pb.Product
};

WarehouseService.BatchUpdateProductMeasures = {
  methodName: "BatchUpdateProductMeasures",
  service: WarehouseService,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_warehouseservice_pb.WarehouseBatchUpdateProductMeasuresRequest,
  responseType: google_protobuf_empty_pb.Empty
};

WarehouseService.ListMarketingInsertProducts = {
  methodName: "ListMarketingInsertProducts",
  service: WarehouseService,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_warehouseservice_pb.WarehouseListMarketingInsertProductsRequest,
  responseType: bigblue_products_v0_warehouseservice_pb.WarehouseListMarketingInsertProductsResponse
};

WarehouseService.ListProductPackUnits = {
  methodName: "ListProductPackUnits",
  service: WarehouseService,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_warehouseservice_pb.WarehouseListProductPackUnitsRequest,
  responseType: bigblue_products_v0_warehouseservice_pb.WarehouseListProductPackUnitsResponse
};

exports.WarehouseService = WarehouseService;

function WarehouseServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

WarehouseServiceClient.prototype.getProduct = function getProduct(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WarehouseService.GetProduct, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WarehouseServiceClient.prototype.batchUpdateProductMeasures = function batchUpdateProductMeasures(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WarehouseService.BatchUpdateProductMeasures, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WarehouseServiceClient.prototype.listMarketingInsertProducts = function listMarketingInsertProducts(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WarehouseService.ListMarketingInsertProducts, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

WarehouseServiceClient.prototype.listProductPackUnits = function listProductPackUnits(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(WarehouseService.ListProductPackUnits, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.WarehouseServiceClient = WarehouseServiceClient;


