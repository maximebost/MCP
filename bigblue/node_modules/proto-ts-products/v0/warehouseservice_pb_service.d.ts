// package: bigblue.products.v0
// file: bigblue/products/v0/warehouseservice.proto

import * as bigblue_products_v0_warehouseservice_pb from "./warehouseservice_pb";
import * as bigblue_products_v0_product_pb from "./product_pb";
import * as google_protobuf_empty_pb from "google-protobuf/google/protobuf/empty_pb";
import {grpc} from "@improbable-eng/grpc-web";

type WarehouseServiceGetProduct = {
  readonly methodName: string;
  readonly service: typeof WarehouseService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof bigblue_products_v0_warehouseservice_pb.WarehouseGetProductRequest;
  readonly responseType: typeof bigblue_products_v0_product_pb.Product;
};

type WarehouseServiceBatchUpdateProductMeasures = {
  readonly methodName: string;
  readonly service: typeof WarehouseService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof bigblue_products_v0_warehouseservice_pb.WarehouseBatchUpdateProductMeasuresRequest;
  readonly responseType: typeof google_protobuf_empty_pb.Empty;
};

type WarehouseServiceListMarketingInsertProducts = {
  readonly methodName: string;
  readonly service: typeof WarehouseService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof bigblue_products_v0_warehouseservice_pb.WarehouseListMarketingInsertProductsRequest;
  readonly responseType: typeof bigblue_products_v0_warehouseservice_pb.WarehouseListMarketingInsertProductsResponse;
};

type WarehouseServiceListProductPackUnits = {
  readonly methodName: string;
  readonly service: typeof WarehouseService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof bigblue_products_v0_warehouseservice_pb.WarehouseListProductPackUnitsRequest;
  readonly responseType: typeof bigblue_products_v0_warehouseservice_pb.WarehouseListProductPackUnitsResponse;
};

export class WarehouseService {
  static readonly serviceName: string;
  static readonly GetProduct: WarehouseServiceGetProduct;
  static readonly BatchUpdateProductMeasures: WarehouseServiceBatchUpdateProductMeasures;
  static readonly ListMarketingInsertProducts: WarehouseServiceListMarketingInsertProducts;
  static readonly ListProductPackUnits: WarehouseServiceListProductPackUnits;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class WarehouseServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  getProduct(
    requestMessage: bigblue_products_v0_warehouseservice_pb.WarehouseGetProductRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: bigblue_products_v0_product_pb.Product|null) => void
  ): UnaryResponse;
  getProduct(
    requestMessage: bigblue_products_v0_warehouseservice_pb.WarehouseGetProductRequest,
    callback: (error: ServiceError|null, responseMessage: bigblue_products_v0_product_pb.Product|null) => void
  ): UnaryResponse;
  batchUpdateProductMeasures(
    requestMessage: bigblue_products_v0_warehouseservice_pb.WarehouseBatchUpdateProductMeasuresRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: google_protobuf_empty_pb.Empty|null) => void
  ): UnaryResponse;
  batchUpdateProductMeasures(
    requestMessage: bigblue_products_v0_warehouseservice_pb.WarehouseBatchUpdateProductMeasuresRequest,
    callback: (error: ServiceError|null, responseMessage: google_protobuf_empty_pb.Empty|null) => void
  ): UnaryResponse;
  listMarketingInsertProducts(
    requestMessage: bigblue_products_v0_warehouseservice_pb.WarehouseListMarketingInsertProductsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: bigblue_products_v0_warehouseservice_pb.WarehouseListMarketingInsertProductsResponse|null) => void
  ): UnaryResponse;
  listMarketingInsertProducts(
    requestMessage: bigblue_products_v0_warehouseservice_pb.WarehouseListMarketingInsertProductsRequest,
    callback: (error: ServiceError|null, responseMessage: bigblue_products_v0_warehouseservice_pb.WarehouseListMarketingInsertProductsResponse|null) => void
  ): UnaryResponse;
  listProductPackUnits(
    requestMessage: bigblue_products_v0_warehouseservice_pb.WarehouseListProductPackUnitsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: bigblue_products_v0_warehouseservice_pb.WarehouseListProductPackUnitsResponse|null) => void
  ): UnaryResponse;
  listProductPackUnits(
    requestMessage: bigblue_products_v0_warehouseservice_pb.WarehouseListProductPackUnitsRequest,
    callback: (error: ServiceError|null, responseMessage: bigblue_products_v0_warehouseservice_pb.WarehouseListProductPackUnitsResponse|null) => void
  ): UnaryResponse;
}


