// package: bigblue.products.v0
// file: bigblue/products/v0/product.proto

import * as jspb from "google-protobuf";
import * as bigblue_common_event_pb from "proto-ts-common/event_pb";
import * as bigblue_common_money_pb from "proto-ts-common/money_pb";

export class Settings extends jspb.Message {
  getTenant(): string;
  setTenant(value: string): void;

  getLotsTracking(): boolean;
  setLotsTracking(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Settings.AsObject;
  static toObject(includeInstance: boolean, msg: Settings): Settings.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Settings, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Settings;
  static deserializeBinaryFromReader(message: Settings, reader: jspb.BinaryReader): Settings;
}

export namespace Settings {
  export type AsObject = {
    tenant: string,
    lotsTracking: boolean,
  }
}

export class Product extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getTenant(): string;
  setTenant(value: string): void;

  getDisplayName(): string;
  setDisplayName(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  clearOptionsList(): void;
  getOptionsList(): Array<ProductOption>;
  setOptionsList(value: Array<ProductOption>): void;
  addOptions(value?: ProductOption, index?: number): ProductOption;

  getBarcode(): string;
  setBarcode(value: string): void;

  getWeight(): number;
  setWeight(value: number): void;

  getWidth(): number;
  setWidth(value: number): void;

  getHeight(): number;
  setHeight(value: number): void;

  getDepth(): number;
  setDepth(value: number): void;

  getPackaging(): PackagingMap[keyof PackagingMap];
  setPackaging(value: PackagingMap[keyof PackagingMap]): void;

  hasValue(): boolean;
  clearValue(): void;
  getValue(): bigblue_common_money_pb.Money | undefined;
  setValue(value?: bigblue_common_money_pb.Money): void;

  getTariffNumber(): string;
  setTariffNumber(value: string): void;

  getOriginCountry(): string;
  setOriginCountry(value: string): void;

  getCustomsDescription(): string;
  setCustomsDescription(value: string): void;

  clearNameTranslationsList(): void;
  getNameTranslationsList(): Array<ProductNameTranslation>;
  setNameTranslationsList(value: Array<ProductNameTranslation>): void;
  addNameTranslations(value?: ProductNameTranslation, index?: number): ProductNameTranslation;

  getFoldable(): boolean;
  setFoldable(value: boolean): void;

  getTrackLots(): boolean;
  setTrackLots(value: boolean): void;

  getTrackLotExpiry(): boolean;
  setTrackLotExpiry(value: boolean): void;

  getLotExpiryThresholdDays(): number;
  setLotExpiryThresholdDays(value: number): void;

  getMarketingInsert(): boolean;
  setMarketingInsert(value: boolean): void;

  getShipWithPolybag(): boolean;
  setShipWithPolybag(value: boolean): void;

  getStorageType(): StorageTypeMap[keyof StorageTypeMap];
  setStorageType(value: StorageTypeMap[keyof StorageTypeMap]): void;

  getHandlingType(): HandlingTypeMap[keyof HandlingTypeMap];
  setHandlingType(value: HandlingTypeMap[keyof HandlingTypeMap]): void;

  hasMainImage(): boolean;
  clearMainImage(): void;
  getMainImage(): ProductImage | undefined;
  setMainImage(value?: ProductImage): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Product.AsObject;
  static toObject(includeInstance: boolean, msg: Product): Product.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Product, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Product;
  static deserializeBinaryFromReader(message: Product, reader: jspb.BinaryReader): Product;
}

export namespace Product {
  export type AsObject = {
    id: string,
    tenant: string,
    displayName: string,
    description: string,
    optionsList: Array<ProductOption.AsObject>,
    barcode: string,
    weight: number,
    width: number,
    height: number,
    depth: number,
    packaging: PackagingMap[keyof PackagingMap],
    value?: bigblue_common_money_pb.Money.AsObject,
    tariffNumber: string,
    originCountry: string,
    customsDescription: string,
    nameTranslationsList: Array<ProductNameTranslation.AsObject>,
    foldable: boolean,
    trackLots: boolean,
    trackLotExpiry: boolean,
    lotExpiryThresholdDays: number,
    marketingInsert: boolean,
    shipWithPolybag: boolean,
    storageType: StorageTypeMap[keyof StorageTypeMap],
    handlingType: HandlingTypeMap[keyof HandlingTypeMap],
    mainImage?: ProductImage.AsObject,
  }
}

export class ProductForm extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getDisplayName(): string;
  setDisplayName(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  clearOptionsList(): void;
  getOptionsList(): Array<ProductOption>;
  setOptionsList(value: Array<ProductOption>): void;
  addOptions(value?: ProductOption, index?: number): ProductOption;

  getBarcode(): string;
  setBarcode(value: string): void;

  getWeight(): number;
  setWeight(value: number): void;

  getWidth(): number;
  setWidth(value: number): void;

  getHeight(): number;
  setHeight(value: number): void;

  getDepth(): number;
  setDepth(value: number): void;

  getPackaging(): PackagingMap[keyof PackagingMap];
  setPackaging(value: PackagingMap[keyof PackagingMap]): void;

  hasValue(): boolean;
  clearValue(): void;
  getValue(): bigblue_common_money_pb.Money | undefined;
  setValue(value?: bigblue_common_money_pb.Money): void;

  getTariffNumber(): string;
  setTariffNumber(value: string): void;

  getOriginCountry(): string;
  setOriginCountry(value: string): void;

  getCustomsDescription(): string;
  setCustomsDescription(value: string): void;

  clearNameTranslationsList(): void;
  getNameTranslationsList(): Array<ProductNameTranslation>;
  setNameTranslationsList(value: Array<ProductNameTranslation>): void;
  addNameTranslations(value?: ProductNameTranslation, index?: number): ProductNameTranslation;

  getFoldable(): boolean;
  setFoldable(value: boolean): void;

  getTrackLots(): boolean;
  setTrackLots(value: boolean): void;

  getTrackLotExpiry(): boolean;
  setTrackLotExpiry(value: boolean): void;

  getLotExpiryThresholdDays(): number;
  setLotExpiryThresholdDays(value: number): void;

  getMarketingInsert(): boolean;
  setMarketingInsert(value: boolean): void;

  getShipWithPolybag(): boolean;
  setShipWithPolybag(value: boolean): void;

  getStorageType(): StorageTypeMap[keyof StorageTypeMap];
  setStorageType(value: StorageTypeMap[keyof StorageTypeMap]): void;

  getHandlingType(): HandlingTypeMap[keyof HandlingTypeMap];
  setHandlingType(value: HandlingTypeMap[keyof HandlingTypeMap]): void;

  hasMainImage(): boolean;
  clearMainImage(): void;
  getMainImage(): ProductImage | undefined;
  setMainImage(value?: ProductImage): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ProductForm.AsObject;
  static toObject(includeInstance: boolean, msg: ProductForm): ProductForm.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ProductForm, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ProductForm;
  static deserializeBinaryFromReader(message: ProductForm, reader: jspb.BinaryReader): ProductForm;
}

export namespace ProductForm {
  export type AsObject = {
    id: string,
    displayName: string,
    description: string,
    optionsList: Array<ProductOption.AsObject>,
    barcode: string,
    weight: number,
    width: number,
    height: number,
    depth: number,
    packaging: PackagingMap[keyof PackagingMap],
    value?: bigblue_common_money_pb.Money.AsObject,
    tariffNumber: string,
    originCountry: string,
    customsDescription: string,
    nameTranslationsList: Array<ProductNameTranslation.AsObject>,
    foldable: boolean,
    trackLots: boolean,
    trackLotExpiry: boolean,
    lotExpiryThresholdDays: number,
    marketingInsert: boolean,
    shipWithPolybag: boolean,
    storageType: StorageTypeMap[keyof StorageTypeMap],
    handlingType: HandlingTypeMap[keyof HandlingTypeMap],
    mainImage?: ProductImage.AsObject,
  }
}

export class ProductOption extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getValue(): string;
  setValue(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ProductOption.AsObject;
  static toObject(includeInstance: boolean, msg: ProductOption): ProductOption.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ProductOption, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ProductOption;
  static deserializeBinaryFromReader(message: ProductOption, reader: jspb.BinaryReader): ProductOption;
}

export namespace ProductOption {
  export type AsObject = {
    name: string,
    value: string,
  }
}

export class ProductVersion extends jspb.Message {
  getCorrelationId(): string;
  setCorrelationId(value: string): void;

  getCreateTime(): string;
  setCreateTime(value: string): void;

  getHash(): number;
  setHash(value: number): void;

  getChangeType(): bigblue_common_event_pb.ChangeTypeMap[keyof bigblue_common_event_pb.ChangeTypeMap];
  setChangeType(value: bigblue_common_event_pb.ChangeTypeMap[keyof bigblue_common_event_pb.ChangeTypeMap]): void;

  hasProduct(): boolean;
  clearProduct(): void;
  getProduct(): Product | undefined;
  setProduct(value?: Product): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ProductVersion.AsObject;
  static toObject(includeInstance: boolean, msg: ProductVersion): ProductVersion.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ProductVersion, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ProductVersion;
  static deserializeBinaryFromReader(message: ProductVersion, reader: jspb.BinaryReader): ProductVersion;
}

export namespace ProductVersion {
  export type AsObject = {
    correlationId: string,
    createTime: string,
    hash: number,
    changeType: bigblue_common_event_pb.ChangeTypeMap[keyof bigblue_common_event_pb.ChangeTypeMap],
    product?: Product.AsObject,
  }
}

export class ProductNameTranslation extends jspb.Message {
  getLanguage(): string;
  setLanguage(value: string): void;

  getName(): string;
  setName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ProductNameTranslation.AsObject;
  static toObject(includeInstance: boolean, msg: ProductNameTranslation): ProductNameTranslation.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ProductNameTranslation, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ProductNameTranslation;
  static deserializeBinaryFromReader(message: ProductNameTranslation, reader: jspb.BinaryReader): ProductNameTranslation;
}

export namespace ProductNameTranslation {
  export type AsObject = {
    language: string,
    name: string,
  }
}

export class Bundle extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getDisplayName(): string;
  setDisplayName(value: string): void;

  clearComponentsList(): void;
  getComponentsList(): Array<BundleComponent>;
  setComponentsList(value: Array<BundleComponent>): void;
  addComponents(value?: BundleComponent, index?: number): BundleComponent;

  clearOptionsList(): void;
  getOptionsList(): Array<ProductOption>;
  setOptionsList(value: Array<ProductOption>): void;
  addOptions(value?: ProductOption, index?: number): ProductOption;

  getComponentsUpdateTime(): string;
  setComponentsUpdateTime(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Bundle.AsObject;
  static toObject(includeInstance: boolean, msg: Bundle): Bundle.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Bundle, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Bundle;
  static deserializeBinaryFromReader(message: Bundle, reader: jspb.BinaryReader): Bundle;
}

export namespace Bundle {
  export type AsObject = {
    id: string,
    displayName: string,
    componentsList: Array<BundleComponent.AsObject>,
    optionsList: Array<ProductOption.AsObject>,
    componentsUpdateTime: string,
  }
}

export class BundleComponent extends jspb.Message {
  getProduct(): string;
  setProduct(value: string): void;

  getQuantity(): number;
  setQuantity(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BundleComponent.AsObject;
  static toObject(includeInstance: boolean, msg: BundleComponent): BundleComponent.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BundleComponent, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BundleComponent;
  static deserializeBinaryFromReader(message: BundleComponent, reader: jspb.BinaryReader): BundleComponent;
}

export namespace BundleComponent {
  export type AsObject = {
    product: string,
    quantity: number,
  }
}

export class BundleVersion extends jspb.Message {
  getCorrelationId(): string;
  setCorrelationId(value: string): void;

  getCreateTime(): string;
  setCreateTime(value: string): void;

  getHash(): number;
  setHash(value: number): void;

  getChangeType(): bigblue_common_event_pb.ChangeTypeMap[keyof bigblue_common_event_pb.ChangeTypeMap];
  setChangeType(value: bigblue_common_event_pb.ChangeTypeMap[keyof bigblue_common_event_pb.ChangeTypeMap]): void;

  hasBundle(): boolean;
  clearBundle(): void;
  getBundle(): Bundle | undefined;
  setBundle(value?: Bundle): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BundleVersion.AsObject;
  static toObject(includeInstance: boolean, msg: BundleVersion): BundleVersion.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BundleVersion, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BundleVersion;
  static deserializeBinaryFromReader(message: BundleVersion, reader: jspb.BinaryReader): BundleVersion;
}

export namespace BundleVersion {
  export type AsObject = {
    correlationId: string,
    createTime: string,
    hash: number,
    changeType: bigblue_common_event_pb.ChangeTypeMap[keyof bigblue_common_event_pb.ChangeTypeMap],
    bundle?: Bundle.AsObject,
  }
}

export class ProductImage extends jspb.Message {
  getSourceUrl(): string;
  setSourceUrl(value: string): void;

  getUpdateTime(): string;
  setUpdateTime(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ProductImage.AsObject;
  static toObject(includeInstance: boolean, msg: ProductImage): ProductImage.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ProductImage, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ProductImage;
  static deserializeBinaryFromReader(message: ProductImage, reader: jspb.BinaryReader): ProductImage;
}

export namespace ProductImage {
  export type AsObject = {
    sourceUrl: string,
    updateTime: string,
  }
}

export class ProductBuyerLocalizationOption extends jspb.Message {
  getDisplayName(): string;
  setDisplayName(value: string): void;

  getValue(): string;
  setValue(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ProductBuyerLocalizationOption.AsObject;
  static toObject(includeInstance: boolean, msg: ProductBuyerLocalizationOption): ProductBuyerLocalizationOption.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ProductBuyerLocalizationOption, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ProductBuyerLocalizationOption;
  static deserializeBinaryFromReader(message: ProductBuyerLocalizationOption, reader: jspb.BinaryReader): ProductBuyerLocalizationOption;
}

export namespace ProductBuyerLocalizationOption {
  export type AsObject = {
    displayName: string,
    value: string,
  }
}

export class ProductBuyerLocalization extends jspb.Message {
  getProduct(): string;
  setProduct(value: string): void;

  getLanguage(): string;
  setLanguage(value: string): void;

  getDisplayName(): string;
  setDisplayName(value: string): void;

  clearOptionsList(): void;
  getOptionsList(): Array<ProductBuyerLocalizationOption>;
  setOptionsList(value: Array<ProductBuyerLocalizationOption>): void;
  addOptions(value?: ProductBuyerLocalizationOption, index?: number): ProductBuyerLocalizationOption;

  getMainImageUrl(): string;
  setMainImageUrl(value: string): void;

  getSourceShop(): string;
  setSourceShop(value: string): void;

  getUpdateTime(): string;
  setUpdateTime(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ProductBuyerLocalization.AsObject;
  static toObject(includeInstance: boolean, msg: ProductBuyerLocalization): ProductBuyerLocalization.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ProductBuyerLocalization, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ProductBuyerLocalization;
  static deserializeBinaryFromReader(message: ProductBuyerLocalization, reader: jspb.BinaryReader): ProductBuyerLocalization;
}

export namespace ProductBuyerLocalization {
  export type AsObject = {
    product: string,
    language: string,
    displayName: string,
    optionsList: Array<ProductBuyerLocalizationOption.AsObject>,
    mainImageUrl: string,
    sourceShop: string,
    updateTime: string,
  }
}

export interface StorageTypeMap {
  STORAGE_TYPE_DEFAULT: 0;
  HANGING_STORAGE_SHORT: 1;
  HANGING_STORAGE_LONG: 2;
}

export const StorageType: StorageTypeMap;

export interface HandlingTypeMap {
  HANDLING_TYPE_DEFAULT: 0;
  HANDLING_MANUAL: 1;
}

export const HandlingType: HandlingTypeMap;

export interface PackagingMap {
  PACKAGING_UNKNOWN: 0;
  SHIP_READY: 1;
}

export const Packaging: PackagingMap;

export interface ProductBuyerLocalizationShopPriorityMap {
  PRODUCT_BUYER_LOCALIZATION_SHOP_PRIORITY_UNSPECIFIED: 0;
  SHOP_PRIORITY_MAIN: 1;
  SHOP_PRIORITY_FALLBACK: 2;
  SHOP_PRIORITY_IGNORED: 3;
}

export const ProductBuyerLocalizationShopPriority: ProductBuyerLocalizationShopPriorityMap;


