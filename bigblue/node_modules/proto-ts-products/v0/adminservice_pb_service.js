// package: bigblue.products.v0
// file: bigblue/products/v0/adminservice.proto

var bigblue_products_v0_adminservice_pb = require("./adminservice_pb");
var bigblue_products_v0_product_pb = require("./product_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var AdminService = (function () {
  function AdminService() {}
  AdminService.serviceName = "bigblue.products.v0.AdminService";
  return AdminService;
}());

AdminService.UpdateProduct = {
  methodName: "UpdateProduct",
  service: AdminService,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_adminservice_pb.AdminUpdateProductRequest,
  responseType: bigblue_products_v0_product_pb.Product
};

AdminService.UpsertContainer = {
  methodName: "UpsertContainer",
  service: AdminService,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_adminservice_pb.AdminUpsertContainerRequest,
  responseType: bigblue_products_v0_adminservice_pb.AdminUpsertContainerResponse
};

AdminService.DeleteContainer = {
  methodName: "DeleteContainer",
  service: AdminService,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_adminservice_pb.AdminDeleteContainerRequest,
  responseType: bigblue_products_v0_adminservice_pb.AdminDeleteContainerResponse
};

AdminService.UpdateSettings = {
  methodName: "UpdateSettings",
  service: AdminService,
  requestStream: false,
  responseStream: false,
  requestType: bigblue_products_v0_adminservice_pb.AdminUpdateSettingsRequest,
  responseType: bigblue_products_v0_adminservice_pb.AdminUpdateSettingsResponse
};

exports.AdminService = AdminService;

function AdminServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

AdminServiceClient.prototype.updateProduct = function updateProduct(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AdminService.UpdateProduct, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

AdminServiceClient.prototype.upsertContainer = function upsertContainer(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AdminService.UpsertContainer, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

AdminServiceClient.prototype.deleteContainer = function deleteContainer(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AdminService.DeleteContainer, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

AdminServiceClient.prototype.updateSettings = function updateSettings(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(AdminService.UpdateSettings, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.AdminServiceClient = AdminServiceClient;


