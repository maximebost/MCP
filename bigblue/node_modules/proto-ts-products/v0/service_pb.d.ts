// package: bigblue.products.v0
// file: bigblue/products/v0/service.proto

import * as jspb from "google-protobuf";
import * as bigblue_common_money_pb from "proto-ts-common/money_pb";
import * as bigblue_products_v0_container_pb from "./container_pb";
import * as bigblue_products_v0_packunit_pb from "./packunit_pb";
import * as bigblue_products_v0_product_pb from "./product_pb";
import * as google_protobuf_empty_pb from "google-protobuf/google/protobuf/empty_pb";

export class CreateProductRequest extends jspb.Message {
  hasProduct(): boolean;
  clearProduct(): void;
  getProduct(): bigblue_products_v0_product_pb.ProductForm | undefined;
  setProduct(value?: bigblue_products_v0_product_pb.ProductForm): void;

  getSkipBarcodeValidation(): boolean;
  setSkipBarcodeValidation(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateProductRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateProductRequest): CreateProductRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateProductRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateProductRequest;
  static deserializeBinaryFromReader(message: CreateProductRequest, reader: jspb.BinaryReader): CreateProductRequest;
}

export namespace CreateProductRequest {
  export type AsObject = {
    product?: bigblue_products_v0_product_pb.ProductForm.AsObject,
    skipBarcodeValidation: boolean,
  }
}

export class GetProductRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetProductRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetProductRequest): GetProductRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetProductRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetProductRequest;
  static deserializeBinaryFromReader(message: GetProductRequest, reader: jspb.BinaryReader): GetProductRequest;
}

export namespace GetProductRequest {
  export type AsObject = {
    id: string,
  }
}

export class BatchGetProductsRequest extends jspb.Message {
  clearIdsList(): void;
  getIdsList(): Array<string>;
  setIdsList(value: Array<string>): void;
  addIds(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchGetProductsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: BatchGetProductsRequest): BatchGetProductsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchGetProductsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchGetProductsRequest;
  static deserializeBinaryFromReader(message: BatchGetProductsRequest, reader: jspb.BinaryReader): BatchGetProductsRequest;
}

export namespace BatchGetProductsRequest {
  export type AsObject = {
    idsList: Array<string>,
  }
}

export class BatchGetProductsResponse extends jspb.Message {
  clearProductsList(): void;
  getProductsList(): Array<bigblue_products_v0_product_pb.Product>;
  setProductsList(value: Array<bigblue_products_v0_product_pb.Product>): void;
  addProducts(value?: bigblue_products_v0_product_pb.Product, index?: number): bigblue_products_v0_product_pb.Product;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchGetProductsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: BatchGetProductsResponse): BatchGetProductsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchGetProductsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchGetProductsResponse;
  static deserializeBinaryFromReader(message: BatchGetProductsResponse, reader: jspb.BinaryReader): BatchGetProductsResponse;
}

export namespace BatchGetProductsResponse {
  export type AsObject = {
    productsList: Array<bigblue_products_v0_product_pb.Product.AsObject>,
  }
}

export class ListProductsRequest extends jspb.Message {
  getModel(): string;
  setModel(value: string): void;

  getBarcode(): string;
  setBarcode(value: string): void;

  getPageSize(): number;
  setPageSize(value: number): void;

  getPageToken(): string;
  setPageToken(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListProductsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListProductsRequest): ListProductsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListProductsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListProductsRequest;
  static deserializeBinaryFromReader(message: ListProductsRequest, reader: jspb.BinaryReader): ListProductsRequest;
}

export namespace ListProductsRequest {
  export type AsObject = {
    model: string,
    barcode: string,
    pageSize: number,
    pageToken: string,
  }
}

export class ListProductsResponse extends jspb.Message {
  clearProductsList(): void;
  getProductsList(): Array<bigblue_products_v0_product_pb.Product>;
  setProductsList(value: Array<bigblue_products_v0_product_pb.Product>): void;
  addProducts(value?: bigblue_products_v0_product_pb.Product, index?: number): bigblue_products_v0_product_pb.Product;

  getNextPageToken(): string;
  setNextPageToken(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListProductsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListProductsResponse): ListProductsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListProductsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListProductsResponse;
  static deserializeBinaryFromReader(message: ListProductsResponse, reader: jspb.BinaryReader): ListProductsResponse;
}

export namespace ListProductsResponse {
  export type AsObject = {
    productsList: Array<bigblue_products_v0_product_pb.Product.AsObject>,
    nextPageToken: string,
  }
}

export class UpdateProductRequest extends jspb.Message {
  hasProduct(): boolean;
  clearProduct(): void;
  getProduct(): bigblue_products_v0_product_pb.ProductForm | undefined;
  setProduct(value?: bigblue_products_v0_product_pb.ProductForm): void;

  clearUpdateMaskList(): void;
  getUpdateMaskList(): Array<string>;
  setUpdateMaskList(value: Array<string>): void;
  addUpdateMask(value: string, index?: number): string;

  getSkipBarcodeValidation(): boolean;
  setSkipBarcodeValidation(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateProductRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateProductRequest): UpdateProductRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UpdateProductRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateProductRequest;
  static deserializeBinaryFromReader(message: UpdateProductRequest, reader: jspb.BinaryReader): UpdateProductRequest;
}

export namespace UpdateProductRequest {
  export type AsObject = {
    product?: bigblue_products_v0_product_pb.ProductForm.AsObject,
    updateMaskList: Array<string>,
    skipBarcodeValidation: boolean,
  }
}

export class CreateProductPackUnitRequest extends jspb.Message {
  hasProductPackUnit(): boolean;
  clearProductPackUnit(): void;
  getProductPackUnit(): bigblue_products_v0_packunit_pb.ProductPackUnit | undefined;
  setProductPackUnit(value?: bigblue_products_v0_packunit_pb.ProductPackUnit): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateProductPackUnitRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateProductPackUnitRequest): CreateProductPackUnitRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateProductPackUnitRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateProductPackUnitRequest;
  static deserializeBinaryFromReader(message: CreateProductPackUnitRequest, reader: jspb.BinaryReader): CreateProductPackUnitRequest;
}

export namespace CreateProductPackUnitRequest {
  export type AsObject = {
    productPackUnit?: bigblue_products_v0_packunit_pb.ProductPackUnit.AsObject,
  }
}

export class UpdateProductPackUnitRequest extends jspb.Message {
  hasProductPackUnit(): boolean;
  clearProductPackUnit(): void;
  getProductPackUnit(): bigblue_products_v0_packunit_pb.ProductPackUnit | undefined;
  setProductPackUnit(value?: bigblue_products_v0_packunit_pb.ProductPackUnit): void;

  clearUpdateMaskList(): void;
  getUpdateMaskList(): Array<string>;
  setUpdateMaskList(value: Array<string>): void;
  addUpdateMask(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateProductPackUnitRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateProductPackUnitRequest): UpdateProductPackUnitRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UpdateProductPackUnitRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateProductPackUnitRequest;
  static deserializeBinaryFromReader(message: UpdateProductPackUnitRequest, reader: jspb.BinaryReader): UpdateProductPackUnitRequest;
}

export namespace UpdateProductPackUnitRequest {
  export type AsObject = {
    productPackUnit?: bigblue_products_v0_packunit_pb.ProductPackUnit.AsObject,
    updateMaskList: Array<string>,
  }
}

export class ListProductPackUnitsRequest extends jspb.Message {
  getProduct(): string;
  setProduct(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListProductPackUnitsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListProductPackUnitsRequest): ListProductPackUnitsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListProductPackUnitsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListProductPackUnitsRequest;
  static deserializeBinaryFromReader(message: ListProductPackUnitsRequest, reader: jspb.BinaryReader): ListProductPackUnitsRequest;
}

export namespace ListProductPackUnitsRequest {
  export type AsObject = {
    product: string,
  }
}

export class ListProductPackUnitsResponse extends jspb.Message {
  clearProductPackUnitsList(): void;
  getProductPackUnitsList(): Array<bigblue_products_v0_packunit_pb.ProductPackUnit>;
  setProductPackUnitsList(value: Array<bigblue_products_v0_packunit_pb.ProductPackUnit>): void;
  addProductPackUnits(value?: bigblue_products_v0_packunit_pb.ProductPackUnit, index?: number): bigblue_products_v0_packunit_pb.ProductPackUnit;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListProductPackUnitsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListProductPackUnitsResponse): ListProductPackUnitsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListProductPackUnitsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListProductPackUnitsResponse;
  static deserializeBinaryFromReader(message: ListProductPackUnitsResponse, reader: jspb.BinaryReader): ListProductPackUnitsResponse;
}

export namespace ListProductPackUnitsResponse {
  export type AsObject = {
    productPackUnitsList: Array<bigblue_products_v0_packunit_pb.ProductPackUnit.AsObject>,
  }
}

export class BatchUpdateProductsRequest extends jspb.Message {
  clearRequestsList(): void;
  getRequestsList(): Array<UpdateProductRequest>;
  setRequestsList(value: Array<UpdateProductRequest>): void;
  addRequests(value?: UpdateProductRequest, index?: number): UpdateProductRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchUpdateProductsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: BatchUpdateProductsRequest): BatchUpdateProductsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchUpdateProductsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchUpdateProductsRequest;
  static deserializeBinaryFromReader(message: BatchUpdateProductsRequest, reader: jspb.BinaryReader): BatchUpdateProductsRequest;
}

export namespace BatchUpdateProductsRequest {
  export type AsObject = {
    requestsList: Array<UpdateProductRequest.AsObject>,
  }
}

export class BatchUpdateProductsResponse extends jspb.Message {
  clearUpdatedIdsList(): void;
  getUpdatedIdsList(): Array<string>;
  setUpdatedIdsList(value: Array<string>): void;
  addUpdatedIds(value: string, index?: number): string;

  clearUpdateErrorsList(): void;
  getUpdateErrorsList(): Array<BatchUpdateProductsResponse.UpdateError>;
  setUpdateErrorsList(value: Array<BatchUpdateProductsResponse.UpdateError>): void;
  addUpdateErrors(value?: BatchUpdateProductsResponse.UpdateError, index?: number): BatchUpdateProductsResponse.UpdateError;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchUpdateProductsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: BatchUpdateProductsResponse): BatchUpdateProductsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchUpdateProductsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchUpdateProductsResponse;
  static deserializeBinaryFromReader(message: BatchUpdateProductsResponse, reader: jspb.BinaryReader): BatchUpdateProductsResponse;
}

export namespace BatchUpdateProductsResponse {
  export type AsObject = {
    updatedIdsList: Array<string>,
    updateErrorsList: Array<BatchUpdateProductsResponse.UpdateError.AsObject>,
  }

  export class UpdateError extends jspb.Message {
    getId(): string;
    setId(value: string): void;

    getReason(): string;
    setReason(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateError.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateError): UpdateError.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateError, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateError;
    static deserializeBinaryFromReader(message: UpdateError, reader: jspb.BinaryReader): UpdateError;
  }

  export namespace UpdateError {
    export type AsObject = {
      id: string,
      reason: string,
    }
  }
}

export class DeleteProductRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeleteProductRequest.AsObject;
  static toObject(includeInstance: boolean, msg: DeleteProductRequest): DeleteProductRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DeleteProductRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeleteProductRequest;
  static deserializeBinaryFromReader(message: DeleteProductRequest, reader: jspb.BinaryReader): DeleteProductRequest;
}

export namespace DeleteProductRequest {
  export type AsObject = {
    id: string,
  }
}

export class GetBarcodeAvailabilityRequest extends jspb.Message {
  getBarcode(): string;
  setBarcode(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetBarcodeAvailabilityRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetBarcodeAvailabilityRequest): GetBarcodeAvailabilityRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetBarcodeAvailabilityRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetBarcodeAvailabilityRequest;
  static deserializeBinaryFromReader(message: GetBarcodeAvailabilityRequest, reader: jspb.BinaryReader): GetBarcodeAvailabilityRequest;
}

export namespace GetBarcodeAvailabilityRequest {
  export type AsObject = {
    barcode: string,
  }
}

export class GetBarcodeAvailabilityResponse extends jspb.Message {
  getAvailable(): boolean;
  setAvailable(value: boolean): void;

  getConflictingProduct(): string;
  setConflictingProduct(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetBarcodeAvailabilityResponse.AsObject;
  static toObject(includeInstance: boolean, msg: GetBarcodeAvailabilityResponse): GetBarcodeAvailabilityResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetBarcodeAvailabilityResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetBarcodeAvailabilityResponse;
  static deserializeBinaryFromReader(message: GetBarcodeAvailabilityResponse, reader: jspb.BinaryReader): GetBarcodeAvailabilityResponse;
}

export namespace GetBarcodeAvailabilityResponse {
  export type AsObject = {
    available: boolean,
    conflictingProduct: string,
  }
}

export class BatchGetBarcodeAvailabilitiesRequest extends jspb.Message {
  clearBarcodesList(): void;
  getBarcodesList(): Array<string>;
  setBarcodesList(value: Array<string>): void;
  addBarcodes(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchGetBarcodeAvailabilitiesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: BatchGetBarcodeAvailabilitiesRequest): BatchGetBarcodeAvailabilitiesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchGetBarcodeAvailabilitiesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchGetBarcodeAvailabilitiesRequest;
  static deserializeBinaryFromReader(message: BatchGetBarcodeAvailabilitiesRequest, reader: jspb.BinaryReader): BatchGetBarcodeAvailabilitiesRequest;
}

export namespace BatchGetBarcodeAvailabilitiesRequest {
  export type AsObject = {
    barcodesList: Array<string>,
  }
}

export class BatchGetBarcodeAvailabilitiesResponse extends jspb.Message {
  clearAvailabilitiesList(): void;
  getAvailabilitiesList(): Array<BatchGetBarcodeAvailabilitiesResponse.BarcodeAvailability>;
  setAvailabilitiesList(value: Array<BatchGetBarcodeAvailabilitiesResponse.BarcodeAvailability>): void;
  addAvailabilities(value?: BatchGetBarcodeAvailabilitiesResponse.BarcodeAvailability, index?: number): BatchGetBarcodeAvailabilitiesResponse.BarcodeAvailability;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchGetBarcodeAvailabilitiesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: BatchGetBarcodeAvailabilitiesResponse): BatchGetBarcodeAvailabilitiesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchGetBarcodeAvailabilitiesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchGetBarcodeAvailabilitiesResponse;
  static deserializeBinaryFromReader(message: BatchGetBarcodeAvailabilitiesResponse, reader: jspb.BinaryReader): BatchGetBarcodeAvailabilitiesResponse;
}

export namespace BatchGetBarcodeAvailabilitiesResponse {
  export type AsObject = {
    availabilitiesList: Array<BatchGetBarcodeAvailabilitiesResponse.BarcodeAvailability.AsObject>,
  }

  export class BarcodeAvailability extends jspb.Message {
    getBarcode(): string;
    setBarcode(value: string): void;

    getAvailable(): boolean;
    setAvailable(value: boolean): void;

    getConflictingProduct(): string;
    setConflictingProduct(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): BarcodeAvailability.AsObject;
    static toObject(includeInstance: boolean, msg: BarcodeAvailability): BarcodeAvailability.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: BarcodeAvailability, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): BarcodeAvailability;
    static deserializeBinaryFromReader(message: BarcodeAvailability, reader: jspb.BinaryReader): BarcodeAvailability;
  }

  export namespace BarcodeAvailability {
    export type AsObject = {
      barcode: string,
      available: boolean,
      conflictingProduct: string,
    }
  }
}

export class ValidateTariffNumberRequest extends jspb.Message {
  getTariffNumber(): string;
  setTariffNumber(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ValidateTariffNumberRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ValidateTariffNumberRequest): ValidateTariffNumberRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ValidateTariffNumberRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ValidateTariffNumberRequest;
  static deserializeBinaryFromReader(message: ValidateTariffNumberRequest, reader: jspb.BinaryReader): ValidateTariffNumberRequest;
}

export namespace ValidateTariffNumberRequest {
  export type AsObject = {
    tariffNumber: string,
  }
}

export class ValidateTariffNumberResponse extends jspb.Message {
  getCategoryDescription(): string;
  setCategoryDescription(value: string): void;

  getSubCategoryDescription(): string;
  setSubCategoryDescription(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ValidateTariffNumberResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ValidateTariffNumberResponse): ValidateTariffNumberResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ValidateTariffNumberResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ValidateTariffNumberResponse;
  static deserializeBinaryFromReader(message: ValidateTariffNumberResponse, reader: jspb.BinaryReader): ValidateTariffNumberResponse;
}

export namespace ValidateTariffNumberResponse {
  export type AsObject = {
    categoryDescription: string,
    subCategoryDescription: string,
  }
}

export class CreateBundleRequest extends jspb.Message {
  hasBundle(): boolean;
  clearBundle(): void;
  getBundle(): bigblue_products_v0_product_pb.Bundle | undefined;
  setBundle(value?: bigblue_products_v0_product_pb.Bundle): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateBundleRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CreateBundleRequest): CreateBundleRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CreateBundleRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CreateBundleRequest;
  static deserializeBinaryFromReader(message: CreateBundleRequest, reader: jspb.BinaryReader): CreateBundleRequest;
}

export namespace CreateBundleRequest {
  export type AsObject = {
    bundle?: bigblue_products_v0_product_pb.Bundle.AsObject,
  }
}

export class BatchCreateBundlesRequest extends jspb.Message {
  clearBundlesList(): void;
  getBundlesList(): Array<bigblue_products_v0_product_pb.Bundle>;
  setBundlesList(value: Array<bigblue_products_v0_product_pb.Bundle>): void;
  addBundles(value?: bigblue_products_v0_product_pb.Bundle, index?: number): bigblue_products_v0_product_pb.Bundle;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchCreateBundlesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: BatchCreateBundlesRequest): BatchCreateBundlesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchCreateBundlesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchCreateBundlesRequest;
  static deserializeBinaryFromReader(message: BatchCreateBundlesRequest, reader: jspb.BinaryReader): BatchCreateBundlesRequest;
}

export namespace BatchCreateBundlesRequest {
  export type AsObject = {
    bundlesList: Array<bigblue_products_v0_product_pb.Bundle.AsObject>,
  }
}

export class BatchCreateBundlesResponse extends jspb.Message {
  clearBundlesList(): void;
  getBundlesList(): Array<bigblue_products_v0_product_pb.Bundle>;
  setBundlesList(value: Array<bigblue_products_v0_product_pb.Bundle>): void;
  addBundles(value?: bigblue_products_v0_product_pb.Bundle, index?: number): bigblue_products_v0_product_pb.Bundle;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchCreateBundlesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: BatchCreateBundlesResponse): BatchCreateBundlesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchCreateBundlesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchCreateBundlesResponse;
  static deserializeBinaryFromReader(message: BatchCreateBundlesResponse, reader: jspb.BinaryReader): BatchCreateBundlesResponse;
}

export namespace BatchCreateBundlesResponse {
  export type AsObject = {
    bundlesList: Array<bigblue_products_v0_product_pb.Bundle.AsObject>,
  }
}

export class UpdateBundleRequest extends jspb.Message {
  hasBundle(): boolean;
  clearBundle(): void;
  getBundle(): bigblue_products_v0_product_pb.Bundle | undefined;
  setBundle(value?: bigblue_products_v0_product_pb.Bundle): void;

  clearUpdateMaskList(): void;
  getUpdateMaskList(): Array<string>;
  setUpdateMaskList(value: Array<string>): void;
  addUpdateMask(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateBundleRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateBundleRequest): UpdateBundleRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UpdateBundleRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateBundleRequest;
  static deserializeBinaryFromReader(message: UpdateBundleRequest, reader: jspb.BinaryReader): UpdateBundleRequest;
}

export namespace UpdateBundleRequest {
  export type AsObject = {
    bundle?: bigblue_products_v0_product_pb.Bundle.AsObject,
    updateMaskList: Array<string>,
  }
}

export class GetBundleRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetBundleRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetBundleRequest): GetBundleRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetBundleRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetBundleRequest;
  static deserializeBinaryFromReader(message: GetBundleRequest, reader: jspb.BinaryReader): GetBundleRequest;
}

export namespace GetBundleRequest {
  export type AsObject = {
    id: string,
  }
}

export class ListBundlesRequest extends jspb.Message {
  getPageSize(): number;
  setPageSize(value: number): void;

  getPageToken(): string;
  setPageToken(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListBundlesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListBundlesRequest): ListBundlesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListBundlesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListBundlesRequest;
  static deserializeBinaryFromReader(message: ListBundlesRequest, reader: jspb.BinaryReader): ListBundlesRequest;
}

export namespace ListBundlesRequest {
  export type AsObject = {
    pageSize: number,
    pageToken: string,
  }
}

export class ListBundlesResponse extends jspb.Message {
  clearBundlesList(): void;
  getBundlesList(): Array<bigblue_products_v0_product_pb.Bundle>;
  setBundlesList(value: Array<bigblue_products_v0_product_pb.Bundle>): void;
  addBundles(value?: bigblue_products_v0_product_pb.Bundle, index?: number): bigblue_products_v0_product_pb.Bundle;

  getNextPageToken(): string;
  setNextPageToken(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListBundlesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListBundlesResponse): ListBundlesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListBundlesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListBundlesResponse;
  static deserializeBinaryFromReader(message: ListBundlesResponse, reader: jspb.BinaryReader): ListBundlesResponse;
}

export namespace ListBundlesResponse {
  export type AsObject = {
    bundlesList: Array<bigblue_products_v0_product_pb.Bundle.AsObject>,
    nextPageToken: string,
  }
}

export class DeleteBundleRequest extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeleteBundleRequest.AsObject;
  static toObject(includeInstance: boolean, msg: DeleteBundleRequest): DeleteBundleRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DeleteBundleRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeleteBundleRequest;
  static deserializeBinaryFromReader(message: DeleteBundleRequest, reader: jspb.BinaryReader): DeleteBundleRequest;
}

export namespace DeleteBundleRequest {
  export type AsObject = {
    id: string,
  }
}

export class BatchListContainersRequest extends jspb.Message {
  clearProductsList(): void;
  getProductsList(): Array<string>;
  setProductsList(value: Array<string>): void;
  addProducts(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchListContainersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: BatchListContainersRequest): BatchListContainersRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchListContainersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchListContainersRequest;
  static deserializeBinaryFromReader(message: BatchListContainersRequest, reader: jspb.BinaryReader): BatchListContainersRequest;
}

export namespace BatchListContainersRequest {
  export type AsObject = {
    productsList: Array<string>,
  }
}

export class BatchListContainersResponse extends jspb.Message {
  clearContainersList(): void;
  getContainersList(): Array<bigblue_products_v0_container_pb.Container>;
  setContainersList(value: Array<bigblue_products_v0_container_pb.Container>): void;
  addContainers(value?: bigblue_products_v0_container_pb.Container, index?: number): bigblue_products_v0_container_pb.Container;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchListContainersResponse.AsObject;
  static toObject(includeInstance: boolean, msg: BatchListContainersResponse): BatchListContainersResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchListContainersResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchListContainersResponse;
  static deserializeBinaryFromReader(message: BatchListContainersResponse, reader: jspb.BinaryReader): BatchListContainersResponse;
}

export namespace BatchListContainersResponse {
  export type AsObject = {
    containersList: Array<bigblue_products_v0_container_pb.Container.AsObject>,
  }
}

export class ListContainersRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListContainersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListContainersRequest): ListContainersRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListContainersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListContainersRequest;
  static deserializeBinaryFromReader(message: ListContainersRequest, reader: jspb.BinaryReader): ListContainersRequest;
}

export namespace ListContainersRequest {
  export type AsObject = {
  }
}

export class ListContainersResponse extends jspb.Message {
  clearContainersList(): void;
  getContainersList(): Array<bigblue_products_v0_container_pb.Container>;
  setContainersList(value: Array<bigblue_products_v0_container_pb.Container>): void;
  addContainers(value?: bigblue_products_v0_container_pb.Container, index?: number): bigblue_products_v0_container_pb.Container;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListContainersResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListContainersResponse): ListContainersResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListContainersResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListContainersResponse;
  static deserializeBinaryFromReader(message: ListContainersResponse, reader: jspb.BinaryReader): ListContainersResponse;
}

export namespace ListContainersResponse {
  export type AsObject = {
    containersList: Array<bigblue_products_v0_container_pb.Container.AsObject>,
  }
}

export class GetProductBuyerLocalizationRequest extends jspb.Message {
  getProduct(): string;
  setProduct(value: string): void;

  clearAcceptLanguagesList(): void;
  getAcceptLanguagesList(): Array<string>;
  setAcceptLanguagesList(value: Array<string>): void;
  addAcceptLanguages(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetProductBuyerLocalizationRequest.AsObject;
  static toObject(includeInstance: boolean, msg: GetProductBuyerLocalizationRequest): GetProductBuyerLocalizationRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetProductBuyerLocalizationRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetProductBuyerLocalizationRequest;
  static deserializeBinaryFromReader(message: GetProductBuyerLocalizationRequest, reader: jspb.BinaryReader): GetProductBuyerLocalizationRequest;
}

export namespace GetProductBuyerLocalizationRequest {
  export type AsObject = {
    product: string,
    acceptLanguagesList: Array<string>,
  }
}

export class BatchGetProductBuyerLocalizationsRequest extends jspb.Message {
  clearRequestsList(): void;
  getRequestsList(): Array<GetProductBuyerLocalizationRequest>;
  setRequestsList(value: Array<GetProductBuyerLocalizationRequest>): void;
  addRequests(value?: GetProductBuyerLocalizationRequest, index?: number): GetProductBuyerLocalizationRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchGetProductBuyerLocalizationsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: BatchGetProductBuyerLocalizationsRequest): BatchGetProductBuyerLocalizationsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchGetProductBuyerLocalizationsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchGetProductBuyerLocalizationsRequest;
  static deserializeBinaryFromReader(message: BatchGetProductBuyerLocalizationsRequest, reader: jspb.BinaryReader): BatchGetProductBuyerLocalizationsRequest;
}

export namespace BatchGetProductBuyerLocalizationsRequest {
  export type AsObject = {
    requestsList: Array<GetProductBuyerLocalizationRequest.AsObject>,
  }
}

export class BatchGetProductBuyerLocalizationsResponse extends jspb.Message {
  clearProductBuyerLocalizationsList(): void;
  getProductBuyerLocalizationsList(): Array<bigblue_products_v0_product_pb.ProductBuyerLocalization>;
  setProductBuyerLocalizationsList(value: Array<bigblue_products_v0_product_pb.ProductBuyerLocalization>): void;
  addProductBuyerLocalizations(value?: bigblue_products_v0_product_pb.ProductBuyerLocalization, index?: number): bigblue_products_v0_product_pb.ProductBuyerLocalization;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchGetProductBuyerLocalizationsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: BatchGetProductBuyerLocalizationsResponse): BatchGetProductBuyerLocalizationsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchGetProductBuyerLocalizationsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchGetProductBuyerLocalizationsResponse;
  static deserializeBinaryFromReader(message: BatchGetProductBuyerLocalizationsResponse, reader: jspb.BinaryReader): BatchGetProductBuyerLocalizationsResponse;
}

export namespace BatchGetProductBuyerLocalizationsResponse {
  export type AsObject = {
    productBuyerLocalizationsList: Array<bigblue_products_v0_product_pb.ProductBuyerLocalization.AsObject>,
  }
}

export class UpsertProductBuyerLocalizationRequest extends jspb.Message {
  getShopPriority(): bigblue_products_v0_product_pb.ProductBuyerLocalizationShopPriorityMap[keyof bigblue_products_v0_product_pb.ProductBuyerLocalizationShopPriorityMap];
  setShopPriority(value: bigblue_products_v0_product_pb.ProductBuyerLocalizationShopPriorityMap[keyof bigblue_products_v0_product_pb.ProductBuyerLocalizationShopPriorityMap]): void;

  hasProductBuyerLocalization(): boolean;
  clearProductBuyerLocalization(): void;
  getProductBuyerLocalization(): bigblue_products_v0_product_pb.ProductBuyerLocalization | undefined;
  setProductBuyerLocalization(value?: bigblue_products_v0_product_pb.ProductBuyerLocalization): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpsertProductBuyerLocalizationRequest.AsObject;
  static toObject(includeInstance: boolean, msg: UpsertProductBuyerLocalizationRequest): UpsertProductBuyerLocalizationRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UpsertProductBuyerLocalizationRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpsertProductBuyerLocalizationRequest;
  static deserializeBinaryFromReader(message: UpsertProductBuyerLocalizationRequest, reader: jspb.BinaryReader): UpsertProductBuyerLocalizationRequest;
}

export namespace UpsertProductBuyerLocalizationRequest {
  export type AsObject = {
    shopPriority: bigblue_products_v0_product_pb.ProductBuyerLocalizationShopPriorityMap[keyof bigblue_products_v0_product_pb.ProductBuyerLocalizationShopPriorityMap],
    productBuyerLocalization?: bigblue_products_v0_product_pb.ProductBuyerLocalization.AsObject,
  }
}

export class BatchUpsertProductBuyerLocalizationsRequest extends jspb.Message {
  clearRequestsList(): void;
  getRequestsList(): Array<UpsertProductBuyerLocalizationRequest>;
  setRequestsList(value: Array<UpsertProductBuyerLocalizationRequest>): void;
  addRequests(value?: UpsertProductBuyerLocalizationRequest, index?: number): UpsertProductBuyerLocalizationRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchUpsertProductBuyerLocalizationsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: BatchUpsertProductBuyerLocalizationsRequest): BatchUpsertProductBuyerLocalizationsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchUpsertProductBuyerLocalizationsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchUpsertProductBuyerLocalizationsRequest;
  static deserializeBinaryFromReader(message: BatchUpsertProductBuyerLocalizationsRequest, reader: jspb.BinaryReader): BatchUpsertProductBuyerLocalizationsRequest;
}

export namespace BatchUpsertProductBuyerLocalizationsRequest {
  export type AsObject = {
    requestsList: Array<UpsertProductBuyerLocalizationRequest.AsObject>,
  }
}

export class BatchUpsertProductBuyerLocalizationsResponse extends jspb.Message {
  getUpsertCount(): number;
  setUpsertCount(value: number): void;

  getSkipCount(): number;
  setSkipCount(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchUpsertProductBuyerLocalizationsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: BatchUpsertProductBuyerLocalizationsResponse): BatchUpsertProductBuyerLocalizationsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchUpsertProductBuyerLocalizationsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchUpsertProductBuyerLocalizationsResponse;
  static deserializeBinaryFromReader(message: BatchUpsertProductBuyerLocalizationsResponse, reader: jspb.BinaryReader): BatchUpsertProductBuyerLocalizationsResponse;
}

export namespace BatchUpsertProductBuyerLocalizationsResponse {
  export type AsObject = {
    upsertCount: number,
    skipCount: number,
  }
}

export class ListProductBuyerLocalizationsRequest extends jspb.Message {
  getModel(): string;
  setModel(value: string): void;

  clearAcceptLanguagesList(): void;
  getAcceptLanguagesList(): Array<string>;
  setAcceptLanguagesList(value: Array<string>): void;
  addAcceptLanguages(value: string, index?: number): string;

  getPageSize(): number;
  setPageSize(value: number): void;

  getPageToken(): string;
  setPageToken(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListProductBuyerLocalizationsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ListProductBuyerLocalizationsRequest): ListProductBuyerLocalizationsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListProductBuyerLocalizationsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListProductBuyerLocalizationsRequest;
  static deserializeBinaryFromReader(message: ListProductBuyerLocalizationsRequest, reader: jspb.BinaryReader): ListProductBuyerLocalizationsRequest;
}

export namespace ListProductBuyerLocalizationsRequest {
  export type AsObject = {
    model: string,
    acceptLanguagesList: Array<string>,
    pageSize: number,
    pageToken: string,
  }
}

export class ListProductBuyerLocalizationsResponse extends jspb.Message {
  clearProductsBuyerLocalizationsList(): void;
  getProductsBuyerLocalizationsList(): Array<bigblue_products_v0_product_pb.ProductBuyerLocalization>;
  setProductsBuyerLocalizationsList(value: Array<bigblue_products_v0_product_pb.ProductBuyerLocalization>): void;
  addProductsBuyerLocalizations(value?: bigblue_products_v0_product_pb.ProductBuyerLocalization, index?: number): bigblue_products_v0_product_pb.ProductBuyerLocalization;

  getNextPageToken(): string;
  setNextPageToken(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ListProductBuyerLocalizationsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: ListProductBuyerLocalizationsResponse): ListProductBuyerLocalizationsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ListProductBuyerLocalizationsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ListProductBuyerLocalizationsResponse;
  static deserializeBinaryFromReader(message: ListProductBuyerLocalizationsResponse, reader: jspb.BinaryReader): ListProductBuyerLocalizationsResponse;
}

export namespace ListProductBuyerLocalizationsResponse {
  export type AsObject = {
    productsBuyerLocalizationsList: Array<bigblue_products_v0_product_pb.ProductBuyerLocalization.AsObject>,
    nextPageToken: string,
  }
}

export class DeleteProductBuyerLocalizationRequest extends jspb.Message {
  getProduct(): string;
  setProduct(value: string): void;

  getLanguage(): string;
  setLanguage(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DeleteProductBuyerLocalizationRequest.AsObject;
  static toObject(includeInstance: boolean, msg: DeleteProductBuyerLocalizationRequest): DeleteProductBuyerLocalizationRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DeleteProductBuyerLocalizationRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DeleteProductBuyerLocalizationRequest;
  static deserializeBinaryFromReader(message: DeleteProductBuyerLocalizationRequest, reader: jspb.BinaryReader): DeleteProductBuyerLocalizationRequest;
}

export namespace DeleteProductBuyerLocalizationRequest {
  export type AsObject = {
    product: string,
    language: string,
  }
}

export class ExportProductsRequest extends jspb.Message {
  getFormat(): ExportProductsRequest.FormatMap[keyof ExportProductsRequest.FormatMap];
  setFormat(value: ExportProductsRequest.FormatMap[keyof ExportProductsRequest.FormatMap]): void;

  getEmail(): string;
  setEmail(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ExportProductsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ExportProductsRequest): ExportProductsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ExportProductsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ExportProductsRequest;
  static deserializeBinaryFromReader(message: ExportProductsRequest, reader: jspb.BinaryReader): ExportProductsRequest;
}

export namespace ExportProductsRequest {
  export type AsObject = {
    format: ExportProductsRequest.FormatMap[keyof ExportProductsRequest.FormatMap],
    email: string,
  }

  export interface FormatMap {
    FORMAT_CSV: 0;
    FORMAT_EXCEL: 1;
  }

  export const Format: FormatMap;
}

export class DebundleLineItemsRequest extends jspb.Message {
  clearLineItemsList(): void;
  getLineItemsList(): Array<DebundleLineItem>;
  setLineItemsList(value: Array<DebundleLineItem>): void;
  addLineItems(value?: DebundleLineItem, index?: number): DebundleLineItem;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DebundleLineItemsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: DebundleLineItemsRequest): DebundleLineItemsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DebundleLineItemsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DebundleLineItemsRequest;
  static deserializeBinaryFromReader(message: DebundleLineItemsRequest, reader: jspb.BinaryReader): DebundleLineItemsRequest;
}

export namespace DebundleLineItemsRequest {
  export type AsObject = {
    lineItemsList: Array<DebundleLineItem.AsObject>,
  }
}

export class DebundleLineItemsResponse extends jspb.Message {
  clearLineItemsList(): void;
  getLineItemsList(): Array<DebundleLineItem>;
  setLineItemsList(value: Array<DebundleLineItem>): void;
  addLineItems(value?: DebundleLineItem, index?: number): DebundleLineItem;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DebundleLineItemsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: DebundleLineItemsResponse): DebundleLineItemsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DebundleLineItemsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DebundleLineItemsResponse;
  static deserializeBinaryFromReader(message: DebundleLineItemsResponse, reader: jspb.BinaryReader): DebundleLineItemsResponse;
}

export namespace DebundleLineItemsResponse {
  export type AsObject = {
    lineItemsList: Array<DebundleLineItem.AsObject>,
  }
}

export class DebundleLineItem extends jspb.Message {
  getProduct(): string;
  setProduct(value: string): void;

  getQuantity(): number;
  setQuantity(value: number): void;

  hasUnitPrice(): boolean;
  clearUnitPrice(): void;
  getUnitPrice(): bigblue_common_money_pb.Money | undefined;
  setUnitPrice(value?: bigblue_common_money_pb.Money): void;

  hasUnitTax(): boolean;
  clearUnitTax(): void;
  getUnitTax(): bigblue_common_money_pb.Money | undefined;
  setUnitTax(value?: bigblue_common_money_pb.Money): void;

  hasDiscount(): boolean;
  clearDiscount(): void;
  getDiscount(): bigblue_common_money_pb.Money | undefined;
  setDiscount(value?: bigblue_common_money_pb.Money): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DebundleLineItem.AsObject;
  static toObject(includeInstance: boolean, msg: DebundleLineItem): DebundleLineItem.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DebundleLineItem, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DebundleLineItem;
  static deserializeBinaryFromReader(message: DebundleLineItem, reader: jspb.BinaryReader): DebundleLineItem;
}

export namespace DebundleLineItem {
  export type AsObject = {
    product: string,
    quantity: number,
    unitPrice?: bigblue_common_money_pb.Money.AsObject,
    unitTax?: bigblue_common_money_pb.Money.AsObject,
    discount?: bigblue_common_money_pb.Money.AsObject,
  }
}


