// source: bigblue/common/address.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.bigblue.common.Address', null, global);
goog.exportSymbol('proto.bigblue.common.BillingAddress', null, global);
goog.exportSymbol('proto.bigblue.common.Contact', null, global);
goog.exportSymbol('proto.bigblue.common.Geolocation', null, global);
goog.exportSymbol('proto.bigblue.common.PickupPoint', null, global);
goog.exportSymbol('proto.bigblue.common.ShippingAddress', null, global);
goog.exportSymbol('proto.bigblue.common.WeeklyTimetable', null, global);
goog.exportSymbol('proto.bigblue.common.WeeklyTimetable.HourRange', null, global);
goog.exportSymbol('proto.bigblue.common.Zone', null, global);
goog.exportSymbol('proto.bigblue.common.Zone.Region', null, global);
goog.exportSymbol('proto.bigblue.common.Zone.Region.Range', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bigblue.common.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bigblue.common.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bigblue.common.Address.displayName = 'proto.bigblue.common.Address';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bigblue.common.Contact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bigblue.common.Contact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bigblue.common.Contact.displayName = 'proto.bigblue.common.Contact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bigblue.common.PickupPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bigblue.common.PickupPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bigblue.common.PickupPoint.displayName = 'proto.bigblue.common.PickupPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bigblue.common.ShippingAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bigblue.common.ShippingAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bigblue.common.ShippingAddress.displayName = 'proto.bigblue.common.ShippingAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bigblue.common.Zone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bigblue.common.Zone.repeatedFields_, null);
};
goog.inherits(proto.bigblue.common.Zone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bigblue.common.Zone.displayName = 'proto.bigblue.common.Zone';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bigblue.common.Zone.Region = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bigblue.common.Zone.Region.repeatedFields_, null);
};
goog.inherits(proto.bigblue.common.Zone.Region, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bigblue.common.Zone.Region.displayName = 'proto.bigblue.common.Zone.Region';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bigblue.common.Zone.Region.Range = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bigblue.common.Zone.Region.Range, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bigblue.common.Zone.Region.Range.displayName = 'proto.bigblue.common.Zone.Region.Range';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bigblue.common.BillingAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bigblue.common.BillingAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bigblue.common.BillingAddress.displayName = 'proto.bigblue.common.BillingAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bigblue.common.WeeklyTimetable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bigblue.common.WeeklyTimetable.repeatedFields_, null);
};
goog.inherits(proto.bigblue.common.WeeklyTimetable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bigblue.common.WeeklyTimetable.displayName = 'proto.bigblue.common.WeeklyTimetable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bigblue.common.WeeklyTimetable.HourRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bigblue.common.WeeklyTimetable.HourRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bigblue.common.WeeklyTimetable.HourRange.displayName = 'proto.bigblue.common.WeeklyTimetable.HourRange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bigblue.common.Geolocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bigblue.common.Geolocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bigblue.common.Geolocation.displayName = 'proto.bigblue.common.Geolocation';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bigblue.common.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.bigblue.common.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bigblue.common.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    line1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    line2: jspb.Message.getFieldWithDefault(msg, 2, ""),
    line3: jspb.Message.getFieldWithDefault(msg, 3, ""),
    line4: jspb.Message.getFieldWithDefault(msg, 4, ""),
    city: jspb.Message.getFieldWithDefault(msg, 5, ""),
    postal: jspb.Message.getFieldWithDefault(msg, 6, ""),
    stateCode: jspb.Message.getFieldWithDefault(msg, 10, ""),
    state: jspb.Message.getFieldWithDefault(msg, 7, ""),
    country: jspb.Message.getFieldWithDefault(msg, 8, ""),
    geolocation: (f = msg.getGeolocation()) && proto.bigblue.common.Geolocation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bigblue.common.Address}
 */
proto.bigblue.common.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bigblue.common.Address;
  return proto.bigblue.common.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bigblue.common.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bigblue.common.Address}
 */
proto.bigblue.common.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLine1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLine2(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLine3(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLine4(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostal(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateCode(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 9:
      var value = new proto.bigblue.common.Geolocation;
      reader.readMessage(value,proto.bigblue.common.Geolocation.deserializeBinaryFromReader);
      msg.setGeolocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bigblue.common.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bigblue.common.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bigblue.common.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLine1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLine2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLine3();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLine4();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPostal();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStateCode();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getGeolocation();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.bigblue.common.Geolocation.serializeBinaryToWriter
    );
  }
};


/**
 * optional string line1 = 1;
 * @return {string}
 */
proto.bigblue.common.Address.prototype.getLine1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Address} returns this
 */
proto.bigblue.common.Address.prototype.setLine1 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string line2 = 2;
 * @return {string}
 */
proto.bigblue.common.Address.prototype.getLine2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Address} returns this
 */
proto.bigblue.common.Address.prototype.setLine2 = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string line3 = 3;
 * @return {string}
 */
proto.bigblue.common.Address.prototype.getLine3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Address} returns this
 */
proto.bigblue.common.Address.prototype.setLine3 = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string line4 = 4;
 * @return {string}
 */
proto.bigblue.common.Address.prototype.getLine4 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Address} returns this
 */
proto.bigblue.common.Address.prototype.setLine4 = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string city = 5;
 * @return {string}
 */
proto.bigblue.common.Address.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Address} returns this
 */
proto.bigblue.common.Address.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string postal = 6;
 * @return {string}
 */
proto.bigblue.common.Address.prototype.getPostal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Address} returns this
 */
proto.bigblue.common.Address.prototype.setPostal = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string state_code = 10;
 * @return {string}
 */
proto.bigblue.common.Address.prototype.getStateCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Address} returns this
 */
proto.bigblue.common.Address.prototype.setStateCode = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string state = 7;
 * @return {string}
 */
proto.bigblue.common.Address.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Address} returns this
 */
proto.bigblue.common.Address.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string country = 8;
 * @return {string}
 */
proto.bigblue.common.Address.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Address} returns this
 */
proto.bigblue.common.Address.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional Geolocation geolocation = 9;
 * @return {?proto.bigblue.common.Geolocation}
 */
proto.bigblue.common.Address.prototype.getGeolocation = function() {
  return /** @type{?proto.bigblue.common.Geolocation} */ (
    jspb.Message.getWrapperField(this, proto.bigblue.common.Geolocation, 9));
};


/**
 * @param {?proto.bigblue.common.Geolocation|undefined} value
 * @return {!proto.bigblue.common.Address} returns this
*/
proto.bigblue.common.Address.prototype.setGeolocation = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bigblue.common.Address} returns this
 */
proto.bigblue.common.Address.prototype.clearGeolocation = function() {
  return this.setGeolocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bigblue.common.Address.prototype.hasGeolocation = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bigblue.common.Contact.prototype.toObject = function(opt_includeInstance) {
  return proto.bigblue.common.Contact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bigblue.common.Contact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.Contact.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 4, ""),
    company: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bigblue.common.Contact}
 */
proto.bigblue.common.Contact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bigblue.common.Contact;
  return proto.bigblue.common.Contact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bigblue.common.Contact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bigblue.common.Contact}
 */
proto.bigblue.common.Contact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bigblue.common.Contact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bigblue.common.Contact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bigblue.common.Contact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.Contact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCompany();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string first_name = 1;
 * @return {string}
 */
proto.bigblue.common.Contact.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Contact} returns this
 */
proto.bigblue.common.Contact.prototype.setFirstName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string last_name = 2;
 * @return {string}
 */
proto.bigblue.common.Contact.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Contact} returns this
 */
proto.bigblue.common.Contact.prototype.setLastName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.bigblue.common.Contact.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Contact} returns this
 */
proto.bigblue.common.Contact.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string phone = 4;
 * @return {string}
 */
proto.bigblue.common.Contact.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Contact} returns this
 */
proto.bigblue.common.Contact.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string company = 5;
 * @return {string}
 */
proto.bigblue.common.Contact.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Contact} returns this
 */
proto.bigblue.common.Contact.prototype.setCompany = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bigblue.common.PickupPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.bigblue.common.PickupPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bigblue.common.PickupPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.PickupPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    displayName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    postal: jspb.Message.getFieldWithDefault(msg, 3, ""),
    stateCode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    state: jspb.Message.getFieldWithDefault(msg, 4, ""),
    country: jspb.Message.getFieldWithDefault(msg, 5, ""),
    carrierService: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bigblue.common.PickupPoint}
 */
proto.bigblue.common.PickupPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bigblue.common.PickupPoint;
  return proto.bigblue.common.PickupPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bigblue.common.PickupPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bigblue.common.PickupPoint}
 */
proto.bigblue.common.PickupPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostal(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStateCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCarrierService(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bigblue.common.PickupPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bigblue.common.PickupPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bigblue.common.PickupPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.PickupPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPostal();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStateCode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCarrierService();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.bigblue.common.PickupPoint.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.PickupPoint} returns this
 */
proto.bigblue.common.PickupPoint.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string display_name = 2;
 * @return {string}
 */
proto.bigblue.common.PickupPoint.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.PickupPoint} returns this
 */
proto.bigblue.common.PickupPoint.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string postal = 3;
 * @return {string}
 */
proto.bigblue.common.PickupPoint.prototype.getPostal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.PickupPoint} returns this
 */
proto.bigblue.common.PickupPoint.prototype.setPostal = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string state_code = 7;
 * @return {string}
 */
proto.bigblue.common.PickupPoint.prototype.getStateCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.PickupPoint} returns this
 */
proto.bigblue.common.PickupPoint.prototype.setStateCode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string state = 4;
 * @return {string}
 */
proto.bigblue.common.PickupPoint.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.PickupPoint} returns this
 */
proto.bigblue.common.PickupPoint.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string country = 5;
 * @return {string}
 */
proto.bigblue.common.PickupPoint.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.PickupPoint} returns this
 */
proto.bigblue.common.PickupPoint.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string carrier_service = 6;
 * @return {string}
 */
proto.bigblue.common.PickupPoint.prototype.getCarrierService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.PickupPoint} returns this
 */
proto.bigblue.common.PickupPoint.prototype.setCarrierService = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bigblue.common.ShippingAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.bigblue.common.ShippingAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bigblue.common.ShippingAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.ShippingAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.bigblue.common.Address.toObject(includeInstance, f),
    contact: (f = msg.getContact()) && proto.bigblue.common.Contact.toObject(includeInstance, f),
    pickupLocation: (f = msg.getPickupLocation()) && proto.bigblue.common.PickupPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bigblue.common.ShippingAddress}
 */
proto.bigblue.common.ShippingAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bigblue.common.ShippingAddress;
  return proto.bigblue.common.ShippingAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bigblue.common.ShippingAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bigblue.common.ShippingAddress}
 */
proto.bigblue.common.ShippingAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bigblue.common.Address;
      reader.readMessage(value,proto.bigblue.common.Address.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = new proto.bigblue.common.Contact;
      reader.readMessage(value,proto.bigblue.common.Contact.deserializeBinaryFromReader);
      msg.setContact(value);
      break;
    case 3:
      var value = new proto.bigblue.common.PickupPoint;
      reader.readMessage(value,proto.bigblue.common.PickupPoint.deserializeBinaryFromReader);
      msg.setPickupLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bigblue.common.ShippingAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bigblue.common.ShippingAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bigblue.common.ShippingAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.ShippingAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bigblue.common.Address.serializeBinaryToWriter
    );
  }
  f = message.getContact();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bigblue.common.Contact.serializeBinaryToWriter
    );
  }
  f = message.getPickupLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.bigblue.common.PickupPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional Address location = 1;
 * @return {?proto.bigblue.common.Address}
 */
proto.bigblue.common.ShippingAddress.prototype.getLocation = function() {
  return /** @type{?proto.bigblue.common.Address} */ (
    jspb.Message.getWrapperField(this, proto.bigblue.common.Address, 1));
};


/**
 * @param {?proto.bigblue.common.Address|undefined} value
 * @return {!proto.bigblue.common.ShippingAddress} returns this
*/
proto.bigblue.common.ShippingAddress.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bigblue.common.ShippingAddress} returns this
 */
proto.bigblue.common.ShippingAddress.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bigblue.common.ShippingAddress.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Contact contact = 2;
 * @return {?proto.bigblue.common.Contact}
 */
proto.bigblue.common.ShippingAddress.prototype.getContact = function() {
  return /** @type{?proto.bigblue.common.Contact} */ (
    jspb.Message.getWrapperField(this, proto.bigblue.common.Contact, 2));
};


/**
 * @param {?proto.bigblue.common.Contact|undefined} value
 * @return {!proto.bigblue.common.ShippingAddress} returns this
*/
proto.bigblue.common.ShippingAddress.prototype.setContact = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bigblue.common.ShippingAddress} returns this
 */
proto.bigblue.common.ShippingAddress.prototype.clearContact = function() {
  return this.setContact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bigblue.common.ShippingAddress.prototype.hasContact = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PickupPoint pickup_location = 3;
 * @return {?proto.bigblue.common.PickupPoint}
 */
proto.bigblue.common.ShippingAddress.prototype.getPickupLocation = function() {
  return /** @type{?proto.bigblue.common.PickupPoint} */ (
    jspb.Message.getWrapperField(this, proto.bigblue.common.PickupPoint, 3));
};


/**
 * @param {?proto.bigblue.common.PickupPoint|undefined} value
 * @return {!proto.bigblue.common.ShippingAddress} returns this
*/
proto.bigblue.common.ShippingAddress.prototype.setPickupLocation = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bigblue.common.ShippingAddress} returns this
 */
proto.bigblue.common.ShippingAddress.prototype.clearPickupLocation = function() {
  return this.setPickupLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bigblue.common.ShippingAddress.prototype.hasPickupLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bigblue.common.Zone.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bigblue.common.Zone.prototype.toObject = function(opt_includeInstance) {
  return proto.bigblue.common.Zone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bigblue.common.Zone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.Zone.toObject = function(includeInstance, msg) {
  var f, obj = {
    countriesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    regionsList: jspb.Message.toObjectList(msg.getRegionsList(),
    proto.bigblue.common.Zone.Region.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bigblue.common.Zone}
 */
proto.bigblue.common.Zone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bigblue.common.Zone;
  return proto.bigblue.common.Zone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bigblue.common.Zone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bigblue.common.Zone}
 */
proto.bigblue.common.Zone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCountries(value);
      break;
    case 2:
      var value = new proto.bigblue.common.Zone.Region;
      reader.readMessage(value,proto.bigblue.common.Zone.Region.deserializeBinaryFromReader);
      msg.addRegions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bigblue.common.Zone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bigblue.common.Zone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bigblue.common.Zone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.Zone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountriesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getRegionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bigblue.common.Zone.Region.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bigblue.common.Zone.Region.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bigblue.common.Zone.Region.prototype.toObject = function(opt_includeInstance) {
  return proto.bigblue.common.Zone.Region.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bigblue.common.Zone.Region} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.Zone.Region.toObject = function(includeInstance, msg) {
  var f, obj = {
    country: jspb.Message.getFieldWithDefault(msg, 1, ""),
    postalPrefixesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    postalRangesList: jspb.Message.toObjectList(msg.getPostalRangesList(),
    proto.bigblue.common.Zone.Region.Range.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bigblue.common.Zone.Region}
 */
proto.bigblue.common.Zone.Region.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bigblue.common.Zone.Region;
  return proto.bigblue.common.Zone.Region.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bigblue.common.Zone.Region} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bigblue.common.Zone.Region}
 */
proto.bigblue.common.Zone.Region.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPostalPrefixes(value);
      break;
    case 3:
      var value = new proto.bigblue.common.Zone.Region.Range;
      reader.readMessage(value,proto.bigblue.common.Zone.Region.Range.deserializeBinaryFromReader);
      msg.addPostalRanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bigblue.common.Zone.Region.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bigblue.common.Zone.Region.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bigblue.common.Zone.Region} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.Zone.Region.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPostalPrefixesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPostalRangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.bigblue.common.Zone.Region.Range.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bigblue.common.Zone.Region.Range.prototype.toObject = function(opt_includeInstance) {
  return proto.bigblue.common.Zone.Region.Range.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bigblue.common.Zone.Region.Range} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.Zone.Region.Range.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromPrefix: jspb.Message.getFieldWithDefault(msg, 1, ""),
    toPrefix: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bigblue.common.Zone.Region.Range}
 */
proto.bigblue.common.Zone.Region.Range.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bigblue.common.Zone.Region.Range;
  return proto.bigblue.common.Zone.Region.Range.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bigblue.common.Zone.Region.Range} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bigblue.common.Zone.Region.Range}
 */
proto.bigblue.common.Zone.Region.Range.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromPrefix(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bigblue.common.Zone.Region.Range.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bigblue.common.Zone.Region.Range.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bigblue.common.Zone.Region.Range} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.Zone.Region.Range.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromPrefix();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToPrefix();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string from_prefix = 1;
 * @return {string}
 */
proto.bigblue.common.Zone.Region.Range.prototype.getFromPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Zone.Region.Range} returns this
 */
proto.bigblue.common.Zone.Region.Range.prototype.setFromPrefix = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to_prefix = 2;
 * @return {string}
 */
proto.bigblue.common.Zone.Region.Range.prototype.getToPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Zone.Region.Range} returns this
 */
proto.bigblue.common.Zone.Region.Range.prototype.setToPrefix = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string country = 1;
 * @return {string}
 */
proto.bigblue.common.Zone.Region.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.Zone.Region} returns this
 */
proto.bigblue.common.Zone.Region.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string postal_prefixes = 2;
 * @return {!Array<string>}
 */
proto.bigblue.common.Zone.Region.prototype.getPostalPrefixesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.bigblue.common.Zone.Region} returns this
 */
proto.bigblue.common.Zone.Region.prototype.setPostalPrefixesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.bigblue.common.Zone.Region} returns this
 */
proto.bigblue.common.Zone.Region.prototype.addPostalPrefixes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bigblue.common.Zone.Region} returns this
 */
proto.bigblue.common.Zone.Region.prototype.clearPostalPrefixesList = function() {
  return this.setPostalPrefixesList([]);
};


/**
 * repeated Range postal_ranges = 3;
 * @return {!Array<!proto.bigblue.common.Zone.Region.Range>}
 */
proto.bigblue.common.Zone.Region.prototype.getPostalRangesList = function() {
  return /** @type{!Array<!proto.bigblue.common.Zone.Region.Range>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bigblue.common.Zone.Region.Range, 3));
};


/**
 * @param {!Array<!proto.bigblue.common.Zone.Region.Range>} value
 * @return {!proto.bigblue.common.Zone.Region} returns this
*/
proto.bigblue.common.Zone.Region.prototype.setPostalRangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.bigblue.common.Zone.Region.Range=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bigblue.common.Zone.Region.Range}
 */
proto.bigblue.common.Zone.Region.prototype.addPostalRanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.bigblue.common.Zone.Region.Range, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bigblue.common.Zone.Region} returns this
 */
proto.bigblue.common.Zone.Region.prototype.clearPostalRangesList = function() {
  return this.setPostalRangesList([]);
};


/**
 * repeated string countries = 1;
 * @return {!Array<string>}
 */
proto.bigblue.common.Zone.prototype.getCountriesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.bigblue.common.Zone} returns this
 */
proto.bigblue.common.Zone.prototype.setCountriesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.bigblue.common.Zone} returns this
 */
proto.bigblue.common.Zone.prototype.addCountries = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bigblue.common.Zone} returns this
 */
proto.bigblue.common.Zone.prototype.clearCountriesList = function() {
  return this.setCountriesList([]);
};


/**
 * repeated Region regions = 2;
 * @return {!Array<!proto.bigblue.common.Zone.Region>}
 */
proto.bigblue.common.Zone.prototype.getRegionsList = function() {
  return /** @type{!Array<!proto.bigblue.common.Zone.Region>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bigblue.common.Zone.Region, 2));
};


/**
 * @param {!Array<!proto.bigblue.common.Zone.Region>} value
 * @return {!proto.bigblue.common.Zone} returns this
*/
proto.bigblue.common.Zone.prototype.setRegionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bigblue.common.Zone.Region=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bigblue.common.Zone.Region}
 */
proto.bigblue.common.Zone.prototype.addRegions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bigblue.common.Zone.Region, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bigblue.common.Zone} returns this
 */
proto.bigblue.common.Zone.prototype.clearRegionsList = function() {
  return this.setRegionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bigblue.common.BillingAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.bigblue.common.BillingAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bigblue.common.BillingAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.BillingAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    company: jspb.Message.getFieldWithDefault(msg, 4, ""),
    line1: jspb.Message.getFieldWithDefault(msg, 5, ""),
    line2: jspb.Message.getFieldWithDefault(msg, 6, ""),
    line3: jspb.Message.getFieldWithDefault(msg, 7, ""),
    line4: jspb.Message.getFieldWithDefault(msg, 8, ""),
    city: jspb.Message.getFieldWithDefault(msg, 9, ""),
    postal: jspb.Message.getFieldWithDefault(msg, 10, ""),
    state: jspb.Message.getFieldWithDefault(msg, 11, ""),
    country: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bigblue.common.BillingAddress}
 */
proto.bigblue.common.BillingAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bigblue.common.BillingAddress;
  return proto.bigblue.common.BillingAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bigblue.common.BillingAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bigblue.common.BillingAddress}
 */
proto.bigblue.common.BillingAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLine1(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLine2(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLine3(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLine4(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostal(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bigblue.common.BillingAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bigblue.common.BillingAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bigblue.common.BillingAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.BillingAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCompany();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLine1();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLine2();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLine3();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLine4();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPostal();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string first_name = 1;
 * @return {string}
 */
proto.bigblue.common.BillingAddress.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.BillingAddress} returns this
 */
proto.bigblue.common.BillingAddress.prototype.setFirstName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string last_name = 2;
 * @return {string}
 */
proto.bigblue.common.BillingAddress.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.BillingAddress} returns this
 */
proto.bigblue.common.BillingAddress.prototype.setLastName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.bigblue.common.BillingAddress.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.BillingAddress} returns this
 */
proto.bigblue.common.BillingAddress.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string company = 4;
 * @return {string}
 */
proto.bigblue.common.BillingAddress.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.BillingAddress} returns this
 */
proto.bigblue.common.BillingAddress.prototype.setCompany = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string line1 = 5;
 * @return {string}
 */
proto.bigblue.common.BillingAddress.prototype.getLine1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.BillingAddress} returns this
 */
proto.bigblue.common.BillingAddress.prototype.setLine1 = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string line2 = 6;
 * @return {string}
 */
proto.bigblue.common.BillingAddress.prototype.getLine2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.BillingAddress} returns this
 */
proto.bigblue.common.BillingAddress.prototype.setLine2 = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string line3 = 7;
 * @return {string}
 */
proto.bigblue.common.BillingAddress.prototype.getLine3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.BillingAddress} returns this
 */
proto.bigblue.common.BillingAddress.prototype.setLine3 = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string line4 = 8;
 * @return {string}
 */
proto.bigblue.common.BillingAddress.prototype.getLine4 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.BillingAddress} returns this
 */
proto.bigblue.common.BillingAddress.prototype.setLine4 = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string city = 9;
 * @return {string}
 */
proto.bigblue.common.BillingAddress.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.BillingAddress} returns this
 */
proto.bigblue.common.BillingAddress.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string postal = 10;
 * @return {string}
 */
proto.bigblue.common.BillingAddress.prototype.getPostal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.BillingAddress} returns this
 */
proto.bigblue.common.BillingAddress.prototype.setPostal = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string state = 11;
 * @return {string}
 */
proto.bigblue.common.BillingAddress.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.BillingAddress} returns this
 */
proto.bigblue.common.BillingAddress.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string country = 12;
 * @return {string}
 */
proto.bigblue.common.BillingAddress.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.BillingAddress} returns this
 */
proto.bigblue.common.BillingAddress.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bigblue.common.WeeklyTimetable.repeatedFields_ = [1,2,3,4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bigblue.common.WeeklyTimetable.prototype.toObject = function(opt_includeInstance) {
  return proto.bigblue.common.WeeklyTimetable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bigblue.common.WeeklyTimetable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.WeeklyTimetable.toObject = function(includeInstance, msg) {
  var f, obj = {
    mondayList: jspb.Message.toObjectList(msg.getMondayList(),
    proto.bigblue.common.WeeklyTimetable.HourRange.toObject, includeInstance),
    tuesdayList: jspb.Message.toObjectList(msg.getTuesdayList(),
    proto.bigblue.common.WeeklyTimetable.HourRange.toObject, includeInstance),
    wednesdayList: jspb.Message.toObjectList(msg.getWednesdayList(),
    proto.bigblue.common.WeeklyTimetable.HourRange.toObject, includeInstance),
    thursdayList: jspb.Message.toObjectList(msg.getThursdayList(),
    proto.bigblue.common.WeeklyTimetable.HourRange.toObject, includeInstance),
    fridayList: jspb.Message.toObjectList(msg.getFridayList(),
    proto.bigblue.common.WeeklyTimetable.HourRange.toObject, includeInstance),
    saturdayList: jspb.Message.toObjectList(msg.getSaturdayList(),
    proto.bigblue.common.WeeklyTimetable.HourRange.toObject, includeInstance),
    sundayList: jspb.Message.toObjectList(msg.getSundayList(),
    proto.bigblue.common.WeeklyTimetable.HourRange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bigblue.common.WeeklyTimetable}
 */
proto.bigblue.common.WeeklyTimetable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bigblue.common.WeeklyTimetable;
  return proto.bigblue.common.WeeklyTimetable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bigblue.common.WeeklyTimetable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bigblue.common.WeeklyTimetable}
 */
proto.bigblue.common.WeeklyTimetable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bigblue.common.WeeklyTimetable.HourRange;
      reader.readMessage(value,proto.bigblue.common.WeeklyTimetable.HourRange.deserializeBinaryFromReader);
      msg.addMonday(value);
      break;
    case 2:
      var value = new proto.bigblue.common.WeeklyTimetable.HourRange;
      reader.readMessage(value,proto.bigblue.common.WeeklyTimetable.HourRange.deserializeBinaryFromReader);
      msg.addTuesday(value);
      break;
    case 3:
      var value = new proto.bigblue.common.WeeklyTimetable.HourRange;
      reader.readMessage(value,proto.bigblue.common.WeeklyTimetable.HourRange.deserializeBinaryFromReader);
      msg.addWednesday(value);
      break;
    case 4:
      var value = new proto.bigblue.common.WeeklyTimetable.HourRange;
      reader.readMessage(value,proto.bigblue.common.WeeklyTimetable.HourRange.deserializeBinaryFromReader);
      msg.addThursday(value);
      break;
    case 5:
      var value = new proto.bigblue.common.WeeklyTimetable.HourRange;
      reader.readMessage(value,proto.bigblue.common.WeeklyTimetable.HourRange.deserializeBinaryFromReader);
      msg.addFriday(value);
      break;
    case 6:
      var value = new proto.bigblue.common.WeeklyTimetable.HourRange;
      reader.readMessage(value,proto.bigblue.common.WeeklyTimetable.HourRange.deserializeBinaryFromReader);
      msg.addSaturday(value);
      break;
    case 7:
      var value = new proto.bigblue.common.WeeklyTimetable.HourRange;
      reader.readMessage(value,proto.bigblue.common.WeeklyTimetable.HourRange.deserializeBinaryFromReader);
      msg.addSunday(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bigblue.common.WeeklyTimetable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bigblue.common.WeeklyTimetable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bigblue.common.WeeklyTimetable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.WeeklyTimetable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMondayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bigblue.common.WeeklyTimetable.HourRange.serializeBinaryToWriter
    );
  }
  f = message.getTuesdayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bigblue.common.WeeklyTimetable.HourRange.serializeBinaryToWriter
    );
  }
  f = message.getWednesdayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.bigblue.common.WeeklyTimetable.HourRange.serializeBinaryToWriter
    );
  }
  f = message.getThursdayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.bigblue.common.WeeklyTimetable.HourRange.serializeBinaryToWriter
    );
  }
  f = message.getFridayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.bigblue.common.WeeklyTimetable.HourRange.serializeBinaryToWriter
    );
  }
  f = message.getSaturdayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.bigblue.common.WeeklyTimetable.HourRange.serializeBinaryToWriter
    );
  }
  f = message.getSundayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.bigblue.common.WeeklyTimetable.HourRange.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bigblue.common.WeeklyTimetable.HourRange.prototype.toObject = function(opt_includeInstance) {
  return proto.bigblue.common.WeeklyTimetable.HourRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bigblue.common.WeeklyTimetable.HourRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.WeeklyTimetable.HourRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTime: jspb.Message.getFieldWithDefault(msg, 1, ""),
    endTime: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bigblue.common.WeeklyTimetable.HourRange}
 */
proto.bigblue.common.WeeklyTimetable.HourRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bigblue.common.WeeklyTimetable.HourRange;
  return proto.bigblue.common.WeeklyTimetable.HourRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bigblue.common.WeeklyTimetable.HourRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bigblue.common.WeeklyTimetable.HourRange}
 */
proto.bigblue.common.WeeklyTimetable.HourRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bigblue.common.WeeklyTimetable.HourRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bigblue.common.WeeklyTimetable.HourRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bigblue.common.WeeklyTimetable.HourRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.WeeklyTimetable.HourRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTime();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEndTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string start_time = 1;
 * @return {string}
 */
proto.bigblue.common.WeeklyTimetable.HourRange.prototype.getStartTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.WeeklyTimetable.HourRange} returns this
 */
proto.bigblue.common.WeeklyTimetable.HourRange.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string end_time = 2;
 * @return {string}
 */
proto.bigblue.common.WeeklyTimetable.HourRange.prototype.getEndTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bigblue.common.WeeklyTimetable.HourRange} returns this
 */
proto.bigblue.common.WeeklyTimetable.HourRange.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated HourRange monday = 1;
 * @return {!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>}
 */
proto.bigblue.common.WeeklyTimetable.prototype.getMondayList = function() {
  return /** @type{!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bigblue.common.WeeklyTimetable.HourRange, 1));
};


/**
 * @param {!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>} value
 * @return {!proto.bigblue.common.WeeklyTimetable} returns this
*/
proto.bigblue.common.WeeklyTimetable.prototype.setMondayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bigblue.common.WeeklyTimetable.HourRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bigblue.common.WeeklyTimetable.HourRange}
 */
proto.bigblue.common.WeeklyTimetable.prototype.addMonday = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bigblue.common.WeeklyTimetable.HourRange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bigblue.common.WeeklyTimetable} returns this
 */
proto.bigblue.common.WeeklyTimetable.prototype.clearMondayList = function() {
  return this.setMondayList([]);
};


/**
 * repeated HourRange tuesday = 2;
 * @return {!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>}
 */
proto.bigblue.common.WeeklyTimetable.prototype.getTuesdayList = function() {
  return /** @type{!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bigblue.common.WeeklyTimetable.HourRange, 2));
};


/**
 * @param {!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>} value
 * @return {!proto.bigblue.common.WeeklyTimetable} returns this
*/
proto.bigblue.common.WeeklyTimetable.prototype.setTuesdayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bigblue.common.WeeklyTimetable.HourRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bigblue.common.WeeklyTimetable.HourRange}
 */
proto.bigblue.common.WeeklyTimetable.prototype.addTuesday = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bigblue.common.WeeklyTimetable.HourRange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bigblue.common.WeeklyTimetable} returns this
 */
proto.bigblue.common.WeeklyTimetable.prototype.clearTuesdayList = function() {
  return this.setTuesdayList([]);
};


/**
 * repeated HourRange wednesday = 3;
 * @return {!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>}
 */
proto.bigblue.common.WeeklyTimetable.prototype.getWednesdayList = function() {
  return /** @type{!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bigblue.common.WeeklyTimetable.HourRange, 3));
};


/**
 * @param {!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>} value
 * @return {!proto.bigblue.common.WeeklyTimetable} returns this
*/
proto.bigblue.common.WeeklyTimetable.prototype.setWednesdayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.bigblue.common.WeeklyTimetable.HourRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bigblue.common.WeeklyTimetable.HourRange}
 */
proto.bigblue.common.WeeklyTimetable.prototype.addWednesday = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.bigblue.common.WeeklyTimetable.HourRange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bigblue.common.WeeklyTimetable} returns this
 */
proto.bigblue.common.WeeklyTimetable.prototype.clearWednesdayList = function() {
  return this.setWednesdayList([]);
};


/**
 * repeated HourRange thursday = 4;
 * @return {!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>}
 */
proto.bigblue.common.WeeklyTimetable.prototype.getThursdayList = function() {
  return /** @type{!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bigblue.common.WeeklyTimetable.HourRange, 4));
};


/**
 * @param {!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>} value
 * @return {!proto.bigblue.common.WeeklyTimetable} returns this
*/
proto.bigblue.common.WeeklyTimetable.prototype.setThursdayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.bigblue.common.WeeklyTimetable.HourRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bigblue.common.WeeklyTimetable.HourRange}
 */
proto.bigblue.common.WeeklyTimetable.prototype.addThursday = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.bigblue.common.WeeklyTimetable.HourRange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bigblue.common.WeeklyTimetable} returns this
 */
proto.bigblue.common.WeeklyTimetable.prototype.clearThursdayList = function() {
  return this.setThursdayList([]);
};


/**
 * repeated HourRange friday = 5;
 * @return {!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>}
 */
proto.bigblue.common.WeeklyTimetable.prototype.getFridayList = function() {
  return /** @type{!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bigblue.common.WeeklyTimetable.HourRange, 5));
};


/**
 * @param {!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>} value
 * @return {!proto.bigblue.common.WeeklyTimetable} returns this
*/
proto.bigblue.common.WeeklyTimetable.prototype.setFridayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.bigblue.common.WeeklyTimetable.HourRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bigblue.common.WeeklyTimetable.HourRange}
 */
proto.bigblue.common.WeeklyTimetable.prototype.addFriday = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.bigblue.common.WeeklyTimetable.HourRange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bigblue.common.WeeklyTimetable} returns this
 */
proto.bigblue.common.WeeklyTimetable.prototype.clearFridayList = function() {
  return this.setFridayList([]);
};


/**
 * repeated HourRange saturday = 6;
 * @return {!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>}
 */
proto.bigblue.common.WeeklyTimetable.prototype.getSaturdayList = function() {
  return /** @type{!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bigblue.common.WeeklyTimetable.HourRange, 6));
};


/**
 * @param {!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>} value
 * @return {!proto.bigblue.common.WeeklyTimetable} returns this
*/
proto.bigblue.common.WeeklyTimetable.prototype.setSaturdayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.bigblue.common.WeeklyTimetable.HourRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bigblue.common.WeeklyTimetable.HourRange}
 */
proto.bigblue.common.WeeklyTimetable.prototype.addSaturday = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.bigblue.common.WeeklyTimetable.HourRange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bigblue.common.WeeklyTimetable} returns this
 */
proto.bigblue.common.WeeklyTimetable.prototype.clearSaturdayList = function() {
  return this.setSaturdayList([]);
};


/**
 * repeated HourRange sunday = 7;
 * @return {!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>}
 */
proto.bigblue.common.WeeklyTimetable.prototype.getSundayList = function() {
  return /** @type{!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bigblue.common.WeeklyTimetable.HourRange, 7));
};


/**
 * @param {!Array<!proto.bigblue.common.WeeklyTimetable.HourRange>} value
 * @return {!proto.bigblue.common.WeeklyTimetable} returns this
*/
proto.bigblue.common.WeeklyTimetable.prototype.setSundayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.bigblue.common.WeeklyTimetable.HourRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bigblue.common.WeeklyTimetable.HourRange}
 */
proto.bigblue.common.WeeklyTimetable.prototype.addSunday = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.bigblue.common.WeeklyTimetable.HourRange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bigblue.common.WeeklyTimetable} returns this
 */
proto.bigblue.common.WeeklyTimetable.prototype.clearSundayList = function() {
  return this.setSundayList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bigblue.common.Geolocation.prototype.toObject = function(opt_includeInstance) {
  return proto.bigblue.common.Geolocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bigblue.common.Geolocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.Geolocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bigblue.common.Geolocation}
 */
proto.bigblue.common.Geolocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bigblue.common.Geolocation;
  return proto.bigblue.common.Geolocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bigblue.common.Geolocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bigblue.common.Geolocation}
 */
proto.bigblue.common.Geolocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bigblue.common.Geolocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bigblue.common.Geolocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bigblue.common.Geolocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bigblue.common.Geolocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double latitude = 1;
 * @return {number}
 */
proto.bigblue.common.Geolocation.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bigblue.common.Geolocation} returns this
 */
proto.bigblue.common.Geolocation.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.bigblue.common.Geolocation.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.bigblue.common.Geolocation} returns this
 */
proto.bigblue.common.Geolocation.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


goog.object.extend(exports, proto.bigblue.common);

