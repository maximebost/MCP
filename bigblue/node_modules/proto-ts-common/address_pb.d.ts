// package: bigblue.common
// file: bigblue/common/address.proto

import * as jspb from "google-protobuf";

export class Address extends jspb.Message {
  getLine1(): string;
  setLine1(value: string): void;

  getLine2(): string;
  setLine2(value: string): void;

  getLine3(): string;
  setLine3(value: string): void;

  getLine4(): string;
  setLine4(value: string): void;

  getCity(): string;
  setCity(value: string): void;

  getPostal(): string;
  setPostal(value: string): void;

  getStateCode(): string;
  setStateCode(value: string): void;

  getState(): string;
  setState(value: string): void;

  getCountry(): string;
  setCountry(value: string): void;

  hasGeolocation(): boolean;
  clearGeolocation(): void;
  getGeolocation(): Geolocation | undefined;
  setGeolocation(value?: Geolocation): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Address.AsObject;
  static toObject(includeInstance: boolean, msg: Address): Address.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Address, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Address;
  static deserializeBinaryFromReader(message: Address, reader: jspb.BinaryReader): Address;
}

export namespace Address {
  export type AsObject = {
    line1: string,
    line2: string,
    line3: string,
    line4: string,
    city: string,
    postal: string,
    stateCode: string,
    state: string,
    country: string,
    geolocation?: Geolocation.AsObject,
  }
}

export class Contact extends jspb.Message {
  getFirstName(): string;
  setFirstName(value: string): void;

  getLastName(): string;
  setLastName(value: string): void;

  getEmail(): string;
  setEmail(value: string): void;

  getPhone(): string;
  setPhone(value: string): void;

  getCompany(): string;
  setCompany(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Contact.AsObject;
  static toObject(includeInstance: boolean, msg: Contact): Contact.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Contact, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Contact;
  static deserializeBinaryFromReader(message: Contact, reader: jspb.BinaryReader): Contact;
}

export namespace Contact {
  export type AsObject = {
    firstName: string,
    lastName: string,
    email: string,
    phone: string,
    company: string,
  }
}

export class PickupPoint extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  getDisplayName(): string;
  setDisplayName(value: string): void;

  getPostal(): string;
  setPostal(value: string): void;

  getStateCode(): string;
  setStateCode(value: string): void;

  getState(): string;
  setState(value: string): void;

  getCountry(): string;
  setCountry(value: string): void;

  getCarrierService(): string;
  setCarrierService(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PickupPoint.AsObject;
  static toObject(includeInstance: boolean, msg: PickupPoint): PickupPoint.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PickupPoint, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PickupPoint;
  static deserializeBinaryFromReader(message: PickupPoint, reader: jspb.BinaryReader): PickupPoint;
}

export namespace PickupPoint {
  export type AsObject = {
    id: string,
    displayName: string,
    postal: string,
    stateCode: string,
    state: string,
    country: string,
    carrierService: string,
  }
}

export class ShippingAddress extends jspb.Message {
  hasLocation(): boolean;
  clearLocation(): void;
  getLocation(): Address | undefined;
  setLocation(value?: Address): void;

  hasContact(): boolean;
  clearContact(): void;
  getContact(): Contact | undefined;
  setContact(value?: Contact): void;

  hasPickupLocation(): boolean;
  clearPickupLocation(): void;
  getPickupLocation(): PickupPoint | undefined;
  setPickupLocation(value?: PickupPoint): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ShippingAddress.AsObject;
  static toObject(includeInstance: boolean, msg: ShippingAddress): ShippingAddress.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ShippingAddress, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ShippingAddress;
  static deserializeBinaryFromReader(message: ShippingAddress, reader: jspb.BinaryReader): ShippingAddress;
}

export namespace ShippingAddress {
  export type AsObject = {
    location?: Address.AsObject,
    contact?: Contact.AsObject,
    pickupLocation?: PickupPoint.AsObject,
  }
}

export class Zone extends jspb.Message {
  clearCountriesList(): void;
  getCountriesList(): Array<string>;
  setCountriesList(value: Array<string>): void;
  addCountries(value: string, index?: number): string;

  clearRegionsList(): void;
  getRegionsList(): Array<Zone.Region>;
  setRegionsList(value: Array<Zone.Region>): void;
  addRegions(value?: Zone.Region, index?: number): Zone.Region;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Zone.AsObject;
  static toObject(includeInstance: boolean, msg: Zone): Zone.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Zone, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Zone;
  static deserializeBinaryFromReader(message: Zone, reader: jspb.BinaryReader): Zone;
}

export namespace Zone {
  export type AsObject = {
    countriesList: Array<string>,
    regionsList: Array<Zone.Region.AsObject>,
  }

  export class Region extends jspb.Message {
    getCountry(): string;
    setCountry(value: string): void;

    clearPostalPrefixesList(): void;
    getPostalPrefixesList(): Array<string>;
    setPostalPrefixesList(value: Array<string>): void;
    addPostalPrefixes(value: string, index?: number): string;

    clearPostalRangesList(): void;
    getPostalRangesList(): Array<Zone.Region.Range>;
    setPostalRangesList(value: Array<Zone.Region.Range>): void;
    addPostalRanges(value?: Zone.Region.Range, index?: number): Zone.Region.Range;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Region.AsObject;
    static toObject(includeInstance: boolean, msg: Region): Region.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Region, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Region;
    static deserializeBinaryFromReader(message: Region, reader: jspb.BinaryReader): Region;
  }

  export namespace Region {
    export type AsObject = {
      country: string,
      postalPrefixesList: Array<string>,
      postalRangesList: Array<Zone.Region.Range.AsObject>,
    }

    export class Range extends jspb.Message {
      getFromPrefix(): string;
      setFromPrefix(value: string): void;

      getToPrefix(): string;
      setToPrefix(value: string): void;

      serializeBinary(): Uint8Array;
      toObject(includeInstance?: boolean): Range.AsObject;
      static toObject(includeInstance: boolean, msg: Range): Range.AsObject;
      static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
      static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
      static serializeBinaryToWriter(message: Range, writer: jspb.BinaryWriter): void;
      static deserializeBinary(bytes: Uint8Array): Range;
      static deserializeBinaryFromReader(message: Range, reader: jspb.BinaryReader): Range;
    }

    export namespace Range {
      export type AsObject = {
        fromPrefix: string,
        toPrefix: string,
      }
    }
  }
}

export class BillingAddress extends jspb.Message {
  getFirstName(): string;
  setFirstName(value: string): void;

  getLastName(): string;
  setLastName(value: string): void;

  getEmail(): string;
  setEmail(value: string): void;

  getCompany(): string;
  setCompany(value: string): void;

  getLine1(): string;
  setLine1(value: string): void;

  getLine2(): string;
  setLine2(value: string): void;

  getLine3(): string;
  setLine3(value: string): void;

  getLine4(): string;
  setLine4(value: string): void;

  getCity(): string;
  setCity(value: string): void;

  getPostal(): string;
  setPostal(value: string): void;

  getState(): string;
  setState(value: string): void;

  getCountry(): string;
  setCountry(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BillingAddress.AsObject;
  static toObject(includeInstance: boolean, msg: BillingAddress): BillingAddress.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BillingAddress, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BillingAddress;
  static deserializeBinaryFromReader(message: BillingAddress, reader: jspb.BinaryReader): BillingAddress;
}

export namespace BillingAddress {
  export type AsObject = {
    firstName: string,
    lastName: string,
    email: string,
    company: string,
    line1: string,
    line2: string,
    line3: string,
    line4: string,
    city: string,
    postal: string,
    state: string,
    country: string,
  }
}

export class WeeklyTimetable extends jspb.Message {
  clearMondayList(): void;
  getMondayList(): Array<WeeklyTimetable.HourRange>;
  setMondayList(value: Array<WeeklyTimetable.HourRange>): void;
  addMonday(value?: WeeklyTimetable.HourRange, index?: number): WeeklyTimetable.HourRange;

  clearTuesdayList(): void;
  getTuesdayList(): Array<WeeklyTimetable.HourRange>;
  setTuesdayList(value: Array<WeeklyTimetable.HourRange>): void;
  addTuesday(value?: WeeklyTimetable.HourRange, index?: number): WeeklyTimetable.HourRange;

  clearWednesdayList(): void;
  getWednesdayList(): Array<WeeklyTimetable.HourRange>;
  setWednesdayList(value: Array<WeeklyTimetable.HourRange>): void;
  addWednesday(value?: WeeklyTimetable.HourRange, index?: number): WeeklyTimetable.HourRange;

  clearThursdayList(): void;
  getThursdayList(): Array<WeeklyTimetable.HourRange>;
  setThursdayList(value: Array<WeeklyTimetable.HourRange>): void;
  addThursday(value?: WeeklyTimetable.HourRange, index?: number): WeeklyTimetable.HourRange;

  clearFridayList(): void;
  getFridayList(): Array<WeeklyTimetable.HourRange>;
  setFridayList(value: Array<WeeklyTimetable.HourRange>): void;
  addFriday(value?: WeeklyTimetable.HourRange, index?: number): WeeklyTimetable.HourRange;

  clearSaturdayList(): void;
  getSaturdayList(): Array<WeeklyTimetable.HourRange>;
  setSaturdayList(value: Array<WeeklyTimetable.HourRange>): void;
  addSaturday(value?: WeeklyTimetable.HourRange, index?: number): WeeklyTimetable.HourRange;

  clearSundayList(): void;
  getSundayList(): Array<WeeklyTimetable.HourRange>;
  setSundayList(value: Array<WeeklyTimetable.HourRange>): void;
  addSunday(value?: WeeklyTimetable.HourRange, index?: number): WeeklyTimetable.HourRange;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): WeeklyTimetable.AsObject;
  static toObject(includeInstance: boolean, msg: WeeklyTimetable): WeeklyTimetable.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: WeeklyTimetable, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): WeeklyTimetable;
  static deserializeBinaryFromReader(message: WeeklyTimetable, reader: jspb.BinaryReader): WeeklyTimetable;
}

export namespace WeeklyTimetable {
  export type AsObject = {
    mondayList: Array<WeeklyTimetable.HourRange.AsObject>,
    tuesdayList: Array<WeeklyTimetable.HourRange.AsObject>,
    wednesdayList: Array<WeeklyTimetable.HourRange.AsObject>,
    thursdayList: Array<WeeklyTimetable.HourRange.AsObject>,
    fridayList: Array<WeeklyTimetable.HourRange.AsObject>,
    saturdayList: Array<WeeklyTimetable.HourRange.AsObject>,
    sundayList: Array<WeeklyTimetable.HourRange.AsObject>,
  }

  export class HourRange extends jspb.Message {
    getStartTime(): string;
    setStartTime(value: string): void;

    getEndTime(): string;
    setEndTime(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): HourRange.AsObject;
    static toObject(includeInstance: boolean, msg: HourRange): HourRange.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: HourRange, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): HourRange;
    static deserializeBinaryFromReader(message: HourRange, reader: jspb.BinaryReader): HourRange;
  }

  export namespace HourRange {
    export type AsObject = {
      startTime: string,
      endTime: string,
    }
  }
}

export class Geolocation extends jspb.Message {
  getLatitude(): number;
  setLatitude(value: number): void;

  getLongitude(): number;
  setLongitude(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Geolocation.AsObject;
  static toObject(includeInstance: boolean, msg: Geolocation): Geolocation.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Geolocation, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Geolocation;
  static deserializeBinaryFromReader(message: Geolocation, reader: jspb.BinaryReader): Geolocation;
}

export namespace Geolocation {
  export type AsObject = {
    latitude: number,
    longitude: number,
  }
}


