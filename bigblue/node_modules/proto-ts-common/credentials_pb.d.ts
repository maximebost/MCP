// package: bigblue.common
// file: bigblue/common/credentials.proto

import * as jspb from "google-protobuf";

export class CredentialsSchema extends jspb.Message {
  getIsMaster(): boolean;
  setIsMaster(value: boolean): void;

  clearFieldsList(): void;
  getFieldsList(): Array<CredentialsSchema.Field>;
  setFieldsList(value: Array<CredentialsSchema.Field>): void;
  addFields(value?: CredentialsSchema.Field, index?: number): CredentialsSchema.Field;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CredentialsSchema.AsObject;
  static toObject(includeInstance: boolean, msg: CredentialsSchema): CredentialsSchema.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CredentialsSchema, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CredentialsSchema;
  static deserializeBinaryFromReader(message: CredentialsSchema, reader: jspb.BinaryReader): CredentialsSchema;
}

export namespace CredentialsSchema {
  export type AsObject = {
    isMaster: boolean,
    fieldsList: Array<CredentialsSchema.Field.AsObject>,
  }

  export class Field extends jspb.Message {
    getKey(): string;
    setKey(value: string): void;

    getDisplayName(): string;
    setDisplayName(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Field.AsObject;
    static toObject(includeInstance: boolean, msg: Field): Field.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Field, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Field;
    static deserializeBinaryFromReader(message: Field, reader: jspb.BinaryReader): Field;
  }

  export namespace Field {
    export type AsObject = {
      key: string,
      displayName: string,
    }
  }
}


