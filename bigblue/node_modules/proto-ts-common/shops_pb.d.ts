// package: bigblue.common
// file: bigblue/common/shops.proto

import * as jspb from "google-protobuf";

export class ShopOrderProcessReport extends jspb.Message {
  getErrorMessage(): string;
  setErrorMessage(value: string): void;

  clearProductErrorsList(): void;
  getProductErrorsList(): Array<ShopOrderProductError>;
  setProductErrorsList(value: Array<ShopOrderProductError>): void;
  addProductErrors(value?: ShopOrderProductError, index?: number): ShopOrderProductError;

  getIgnoreReason(): string;
  setIgnoreReason(value: string): void;

  getStatus(): ProcessReportStatusMap[keyof ProcessReportStatusMap];
  setStatus(value: ProcessReportStatusMap[keyof ProcessReportStatusMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ShopOrderProcessReport.AsObject;
  static toObject(includeInstance: boolean, msg: ShopOrderProcessReport): ShopOrderProcessReport.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ShopOrderProcessReport, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ShopOrderProcessReport;
  static deserializeBinaryFromReader(message: ShopOrderProcessReport, reader: jspb.BinaryReader): ShopOrderProcessReport;
}

export namespace ShopOrderProcessReport {
  export type AsObject = {
    errorMessage: string,
    productErrorsList: Array<ShopOrderProductError.AsObject>,
    ignoreReason: string,
    status: ProcessReportStatusMap[keyof ProcessReportStatusMap],
  }
}

export class ShopOrderProductError extends jspb.Message {
  getType(): ShopOrderProductError.TypeMap[keyof ShopOrderProductError.TypeMap];
  setType(value: ShopOrderProductError.TypeMap[keyof ShopOrderProductError.TypeMap]): void;

  getProduct(): string;
  setProduct(value: string): void;

  getProductShopUrl(): string;
  setProductShopUrl(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ShopOrderProductError.AsObject;
  static toObject(includeInstance: boolean, msg: ShopOrderProductError): ShopOrderProductError.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ShopOrderProductError, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ShopOrderProductError;
  static deserializeBinaryFromReader(message: ShopOrderProductError, reader: jspb.BinaryReader): ShopOrderProductError;
}

export namespace ShopOrderProductError {
  export type AsObject = {
    type: ShopOrderProductError.TypeMap[keyof ShopOrderProductError.TypeMap],
    product: string,
    productShopUrl: string,
  }

  export interface TypeMap {
    TYPE_UNSPECIFIED: 0;
    NOT_FOUND: 1;
    NOT_LINKED: 2;
    NOT_MANAGED: 3;
  }

  export const Type: TypeMap;
}

export interface ProcessReportStatusMap {
  SUCCESS: 0;
  FAILURE: 1;
  IGNORED: 2;
}

export const ProcessReportStatus: ProcessReportStatusMap;

export interface ShopProductsFilterMap {
  PRODUCTS_FILTER_UNSPECIFIED: 0;
  PRODUCTS_MANAGED: 1;
  PRODUCTS_UNMANAGED: 2;
}

export const ShopProductsFilter: ShopProductsFilterMap;

export interface ShopOrdersFilterMap {
  ORDERS_FILTER_UNSPECIFIED: 0;
  ORDERS_WITH_ERROR: 1;
}

export const ShopOrdersFilter: ShopOrdersFilterMap;


